;;; closable agents(defclass opener-toggle-button (gesture-handling-mixin ccl::toggle-pict-button proto-block drag-mixin drag-and-drop-mixin expand-container-mixin) () (:default-initargs    :pict (get-resource :pict 204)       ; +++ temp   :pict-pressed (get-resource :pict 205)))(defmethod ccl::press :after ((button opener-toggle-button))  (open-block (view-container button)))(defmethod ccl::release :after ((button opener-toggle-button))  (close-block (view-container button)))(defclass agent-block (form-block track-instances-mixin)  ((agent-name :initform (gensym))   (species :initarg :species :initform nil :accessor species)   (switched-on? :initform nil)   (complete? :initform nil :reader complete?)   (agent)   (open? :initform nil :accessor open?)   (hidden-subviews :initform nil :accessor hidden-subviews)   ))(defmethod create-subviews :after ((block agent-block))  (make-instance 'agent-toggle-button    :view-container block)  (make-instance 'opener-toggle-button    :view-container block))(defmethod* layout-block :after  ((block agent-block) &optional ignore)  (let* ((switch (find-view block #'(lambda (v) (typep v 'agent-toggle-button))))         (opener (find-view block #'(lambda (v) (typep v 'opener-toggle-button)))))    (set-view-position opener #@(6 6))    (set-view-position switch #@(30 6))    (when open?      (call-next-method)))); +++ make blocks come out low(defmethod* open-block ((b agent-block))  (setf open? t)  (dolist (sv hidden-subviews)    (set-view-container sv b))  (setf hidden-subviews nil)  (relayout b))(defmethod* close-block ((b agent-block))  (setf open? nil)  (dosequence (sv (view-subviews b))    (unless (typep sv 'ccl::toggle-pict-button)          ; +++ pretty random      (set-view-container sv nil)      (push sv hidden-subviews)))  (relayout b))