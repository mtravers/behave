(in-package :beh)(defvar *world*)(defclass world ()  (window                                ; *win*   species-class                         ; *species-class*   agent-class                           ; *agent-class*   (types :initform nil :accessor types)                                 ; *all-types* + things now on plists                                        ; now list (type <form>*)   ));;; windows(defmethod* make-window ((w world))  (awhen window    (window-close it))  (setf window (make-win :world w))  (set-window-title window (format nil "Behave! for ~A" w))  window);;; it would be better to change the code to use the world object rather than mucking with extra globals(defmethod* select-world ((w world))  (setf *world* w)  (setf *species-class* species-class        *agent-class* agent-class))(defmethod window-select :after ((w behave-window))  (select-world w));;; types & forms(defun translations (type)  (find type (types *world*) :key #'car))(defun defform-1 (name type args body block-class layout)  (aif (find name (cdr (translations type)) :key #'name)    (delete it (translations type))    (push (list type) (types *world*)))  (let ((form (make-instance 'form                :name name                :type type                :args (mapcar #'(lambda (argdef)                                  (if (symbolp argdef)                                    (list argdef argdef)                                    argdef))                              args)                :block-class block-class                :body body                :layout layout)))    (setf (cdr (translations type))          (cons form (cdr (translations type))))    form))(defun generate-palette ()  (let* ((palette (make-instance 'palette-view                    :view-size (make-point 500 *palette-height*)                    :view-position #@(0 0)                    :view-container *win*))         (*default-block-font* `("Tekton" 16 :bold))         (*standard-border* 3)         (labels (mapcar #'(lambda (type)                             (make-instance 'block-text-subview                               :text (sym-string (car type))                               :text-color (or (get type :color) *gray-color*)                               :view-container palette))                         (types *world*)))         (block-rows (mapcar #'(lambda (type)                                 (mapcar #'(lambda (form)                                             (generate-block form                                                             :view-container palette                                                             :mode :palette))                                         (cdr type)))                             (types *world*)))         (max-height (maximize (apply #'append block-rows)                               :key #'(lambda (view) (view-height view))                               :return-max t))         (max-label-width (maximize labels                                    :key #'(lambda (view) (view-width view))                                    :return-max t))         row x y         (palette-width 0)         (rows nil))    (setf *palette-height* (+ max-height *palette-spacing*))    (setf row 0)    (dolist (label labels)      (set-view-position label (make-point *palette-spacing*                                           (+ (* row *palette-height*)                                              (round (- *palette-height* (view-height label)) 2))))      (incf row))    (setf row 0)    (dolist (block-row block-rows)      (setf x (+ max-label-width *palette-spacing*))      (setf y (* row *palette-height*))      (dolist (block block-row)        (set-view-position block (make-point x                                              (+ y (round (- *palette-height* (view-height block)) 2))))        (incf x (+ (view-width block)                   *palette-spacing*))        (setf palette-width (max palette-width x)))      (incf row))    (set-view-size palette palette-width *palette-height*)    (setf (slot-value palette 'rows)          *world*)                  ; +++    palette));;; StarLogo specific(defclass starlogo-world (world) ()  (:default-initargs    :species-class 'sl-species    :agent-class 'sl-agent));;; Callers of new methods(defun download-agent-blocks ()  (download *world*)  (mapc #'maybe-start-after-download (all-of 'agent-block)))    ; +++ needs to discriminate based on world#| make these methodscompile-agent(defun download ()  )(defmethod start-agent-block ((block agent-block))  )(defmethod stop-agent-block ((block agent-block))  )(defmethod value-changed :after ((v my-slider-view))  )|#