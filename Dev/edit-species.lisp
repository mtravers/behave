#|Todo:- hooks to system, in and out- color editor requires you to press option when done, yuck.- how does the world change when you change a species?- new species blocks aren't set up to be edited.|#(defmethod option-click ((sb species-block) where)  (declare (ignore where))  (edit-species-block sb))(defmethod edit-species-block ((sb species-block))  (let ((species (species-named (species sb)))        dialog name-item number-item color-item)    (setf dialog          (make-instance 'color-dialog            :window-type  :double-edge-box            :view-position  '(:top 60)            :view-size  #@(300 200)            :close-box-p  nil            :view-font  '("Chicago" 12 :srcor :plain (:color-index 0))            :view-subviews            (list (make-dialog-item 'button-dialog-item                                    #@(154 173) #@(66 18)                                    "Cancel"                                    #'(lambda (ignore) (window-close dialog))                                    :default-button                                    nil)                  (make-dialog-item 'button-dialog-item                                    #@(229 174) #@(66 18)                                    "OK"                                    #'(lambda (ignore)                                        (setf (species-color species) (color-bar-color u::*colorbar-window*)) ; (color-patch-dialog-item-color color-item)                                        (setf (species-number species) (parse-integer (dialog-item-text number-item)))                                        (setf (name-of species) (read-from-string (dialog-item-text name-item)))                                        (setf (species sb) (name-of species))                                        (update species)                                        (update-species-block sb)                                        (window-close dialog))                                    :default-button t)                  (setf number-item                        (make-dialog-item 'editable-text-dialog-item                                          #@(107 94) #@(84 16)                                          (princ-to-string (species-number species))                                          'nil                                          :allow-returns nil                                          :draw-outline t))                  (setf name-item                        (make-dialog-item 'editable-text-dialog-item                                          #@(107 66) #@(84 16)                                          (princ-to-string (name-of species))                                          'nil                                          :allow-returns nil                                          :draw-outline t))                  (setf color-item                        (make-dialog-item 'starlogo-color-patch-dialog-item                                          #@(107 124) #@(84 16)                                          ""                                          'nil                                          :color (*color-to-color (species-color species))                                          ))                  (make-dialog-item 'static-text-dialog-item #@(28 69) #@(56 16) "Name:" 'nil)                  (make-dialog-item 'static-text-dialog-item #@(28 96) #@(56 16) "Number:" 'nil)                  (make-dialog-item 'static-text-dialog-item #@(29 124) #@(56 16) "Color:" 'nil)                  (make-dialog-item 'static-text-dialog-item #@(13 7) #@(125 29) "Edit species" 'nil                                    :view-font (append *default-block-font* '(:outline)))                  )))))(defmethod update-species-block ((sb species-block))  (let ((species (species-named (species sb)))        (name-block (find-view sb #'(lambda (x) (typep x 'block-text-subview))))        (pict-block (find-view sb #'(lambda (x) (typep x 'block-pict-subview)))))    (set-view-container pict-block nil)    (make-instance 'block-pict-subview      :view-container sb      :pict (slot-value species 'pict))    (set-view-container name-block nil)    (make-instance 'block-text-subview      :view-container sb      :text (princ-to-string (name-of species)))    (layout-block sb)))                   (defclass color-patch-dialog-item (dialog-item)  ((color :initarg :color          :accessor color-patch-dialog-item-color          :initform *red-color*)))(defmethod view-draw-contents ((v color-patch-dialog-item))  (with-rect (r (view-position v) (add-points (view-position v) (view-size v)))    (with-fore-color (color-patch-dialog-item-color v)      (#_PaintRect r))))(defclass starlogo-color-patch-dialog-item (color-patch-dialog-item)  ())(defmethod* view-click-event-handler ((v starlogo-color-patch-dialog-item) where)  (declare (ignore where))  (at-listener-level     (setf color (*color-to-color (pick-starlogo-color 0)))    (invalidate-view v t)    ))(defun pick-starlogo-color (init-color)  (u::my-come-back u::*colorbar-window*)  (process-wait "Wait for key" #'(lambda () (option-key-p)))  (prog1 (color-bar-color u::*colorbar-window*)    (u::my-go-away u::*colorbar-window*)))  ; returns *logo color number(defmethod color-bar-color ((w u::colorbar-window))  (let ((shade u::*current--shade*)        (color u::*current--color*))    (+ shade (* 10 color))))(defun *color-to-color (*color)  (setf *color (*color-value *color))  (multiple-value-bind (color shade) (floor *color 10)    (with-rgb (the-color 0)      (#_getentrycolor u::palette (+ 2 shade (* 10 color)) the-color)      (rgb-to-color the-color))))