(defmethod drop-target ((dragged-view drag-and-drop-mixin))  (drop-target-1 dragged-view (view-container dragged-view)))(defmethod drop-target-1 ((dragged-view drag-and-drop-mixin) within)  (dosequence (sv (view-subviews within) nil)    (when (and (not (eq sv dragged-view))               (cousin-views-overlap? sv dragged-view (view-container dragged-view)))      (if (can-drop? dragged-view sv)        (return sv)        (awhen (drop-target-1 dragged-view sv)          (return it))))));;; from views-overlap? (defun cousin-views-overlap? (v1 v2 common-ancestor)  (let ((p1 (view-position-relative v1 common-ancestor))        (p2 (view-position-relative v2 common-ancestor)))    (with-rect (r1 p1 (add-points p1 (view-size v1)))      (with-rect (r2 p2 (add-points p2 (view-size v2)))        (#_SectRect r1 r2 r2)))))      