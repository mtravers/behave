(defclass new-palette-view (proto-block beveled-rect-view-mixin gesture-handling-mixin)         ; +++ gesture is temp  ()  (:default-initargs :color (make-gray 60)))#| alternate form(defclass palette-type-label (block-text-subview)   ((type :initarg :type)))|#;;; gnu improved(defclass palette-type-label (arg-block)   ((type :initarg :type)))(defclass block-scroller (proto-block) ())(defmethod* click ((v palette-type-label) where)  (declare (ignore where))  (if (eq type 'species)    (new-species-dialog)    (scroll-to-type (view-container v) type)))(defun new-species-dialog ()  (beep))(defmethod scroll-to-type ((pal new-palette-view) type)  (let ((row (position type *all-types*))        (scroller (find-view pal #'(lambda (sv) (typep sv 'block-scroller)))))    (if row      (progn; I don't like this, but some people do;        (setf (color pal) (color+lightness (type-color type) -.1));        (invalidate-view pal)        (set-view-scroll-position scroller 0 (* row *palette-height*)))      (warn "Palette ~A doesn't know about type ~A" pal type))))(defun generate-new-palette ()  (let* ((palette (make-instance 'new-palette-view                    :view-size (make-point 500 *palette-height*)                    :view-position #@(0 0)                    :view-container *win*))         (scroller (make-instance 'block-scroller                     :view-container palette                     :view-position #@(0 26)                     :view-size (make-point 500 *palette-height*)))         (*default-block-font* `("Tekton" 16 :bold))         (*standard-border* 3)#|         (labels (mapcar #'(lambda (type)                             (make-instance 'palette-type-label                               :text (sym-string type)                               :type type                               :text-color (or (get type :color) *gray-color*)                               :view-container palette))                         *all-types*))|#         (labels (mapcar #'(lambda (type)                             (make-instance 'palette-type-label                               :arg (list type type)                               :type type                               :color (type-color type)                               :bevel-border 3                               :view-container palette))                         *all-types*))         (block-rows (mapcar #'(lambda (type)                                 (mapcar #'(lambda (form)                                             (generate-block form                                                             :view-container scroller                                                             :mode :palette))                                         (filter-out #'hidden (get type :xtranslations))))                             *all-types*))         (max-height (maximize (apply #'append block-rows)                               :key #'(lambda (view) (view-height view))                               :return-max t))         row x y         (palette-width 0))        ;;; position labels    (do ((rest labels (cdr rest))         (x 5 (+ x 10 (point-h (view-size (car rest))))))        ((null rest))      (set-view-position (car rest) (make-point x 4)))        (setf *palette-height* (+ max-height *palette-spacing* (view-height (car labels))))        (setf row 0)    (dolist (block-row block-rows)      (setf x 5)      (setf y (* row *palette-height*))      (dolist (block block-row)        (set-view-position block (make-point x                                              (+ y (round (- max-height (view-height block)) 2))))        (incf x (+ (view-width block)                   *palette-spacing*))        (setf palette-width (max palette-width x)))      (incf row))    (set-view-size palette palette-width *palette-height*)        palette))(defmethod* click ((block arg-block) where)  (declare (ignore where))  (let ((type (cadr arg))        (palette (find-view (view-window block) #'(lambda (v) (typep v 'new-palette-view)))))    (unless (view-contained-by? block palette)      (scroll-to-type palette type))));;; can get rid of scroll buttons 