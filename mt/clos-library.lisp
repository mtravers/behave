(in-package :mt)(require :closstar)(use-package  :clos*)#|History:4/15/97 16:33  Added setf method for name-of|#(defclass named-instance-mixin ()  ((name-of :initarg :name-of :reader name-of)))(defmethod set-name-of ((obj named-instance-mixin) new-name)  (setf (slot-value obj 'name-of) new-name))(defsetf name-of set-name-of)(defmethod print-object ((obj named-instance-mixin) stream)  (print-unreadable-object (obj stream :type t :identity t)    (ignore-errors      (prin1 (name-of obj) stream))));;; track instances of a specific class (that is, subclasses are tracked separately).;;; this is probably a crock. Oh well.;;; what is the right thing? You'd like to say that there was an INSTANCES slot, and;;; have it instantiated at a specified place in the hierarchy...but what if several;;; classes wanted to do this? Hm. (defclass track-instances-mixin ()  ((instance-ht :allocation :class :initform (make-hash-table :test #'eq) :reader instance-ht)))(defmethod all-of-me ((self track-instances-mixin))  (gethash (type-of self) (instance-ht self)))(defun all-of (class-name)  (gethash class-name (instance-ht (class-prototype (find-class 'track-instances-mixin)))))(defmethod initialize-instance :after ((self track-instances-mixin) &rest ignore)  (push self (gethash (type-of self) (instance-ht self))));;; instances have a name, which should be a symbol.  New instances;;; with the same name will displace an older one;;; +++ what about names that are non-symbols (ie a pair). Requires control of matching fun(defclass track-named-instances-mixin (track-instances-mixin named-instance-mixin)  ())(defmethod initialize-instance :after ((self track-named-instances-mixin) &rest ignore)  (setf (gethash (type-of self) (instance-ht self))        (delete-if #'(lambda (x)                       (and (neq x self)                            (eq (name-of x) (name-of self))))                   (gethash (type-of self) (instance-ht self)))))(defun find-named-instance-of (class-name name)  (find-named-instance (class-prototype (find-class class-name)) name))(defmethod find-named-instance ((self track-named-instances-mixin) search-name)  (find search-name (gethash (type-of self) (instance-ht self)) :key #'name-of))(defmethod remove-named-instance ((self track-named-instances-mixin))  (deletef self (gethash (type-of self) (instance-ht self))))(defmethod remove-all-instances ((self track-named-instances-mixin))  (setf (gethash (type-of self) (instance-ht self)) nil))(export '(named-instance-mixin           track-instances-mixin          track-named-instances-mixin          name-of          all-of          find-named-instance-of          find-named-instance          remove-named-instance          remove-all-instances          ))(provide :clos-library)