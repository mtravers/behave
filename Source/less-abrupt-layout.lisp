(in-package :beh)#| ######################################################################Be less abrupt when changing layout after a block is pulledout of another.Copyright © 1996-7 Michael Travers Part of the Behave! systemSend questions, comments, and fixes to mt@media.mit.edu.----- This is a patch because it doesn't yet work quite right with multiple-arguments.###################################################################### |#(defmethod raise :around ((block form-block))  (let ((container (view-container block)))    (call-next-method)    (when (typep container 'form-block)      (restore-hole container block)      ;; after block is dropped, revert hole to default size      (in-background "Restore Hole"     ; let dragging start sooner...        (process-wait "Mouse Up" #'(lambda () (not (mouse-down-p))))        (sleep .25)                     ; gross! leave some time for drop detect to work if block is dropped back home        (call-if #'relayout container))    )));;; this interacts in a much-too-subtle way with layout, especially of species blocks(defmethod* restore-hole ((block form-block) removed-block)  (let* ((pair (assq removed-block saved-holes))         (hole (cdr pair)))    (when pair      (set-view-container hole block)      (set-view-size hole (view-size removed-block))    ; +++ has to do a layout to center the text      (set-view-position hole (subtract-points                               (view-position-relative removed-block (view-window hole))                               (view-position-relative (view-container hole) (view-window hole))))      (layout-arg-block-temp hole)      (deletef pair saved-holes);      (invalidate-view block t)      ; shouldn't be necessary      (layout-block block)      (setf (slot-value hole 'needs-layout?) t)      (block-changed block)      )));;; center the text of the hole(defmethod layout-arg-block-temp ((block arg-block) &optional ignore)  (let ((text-view (aref (view-subviews block) 0))        (half-spacing (round *spacing* 2)))    (set-view-position text-view (make-point half-spacing                                             (round (- (point-v (view-size block))                                                       (point-v (view-size text-view)))                                                    2)))    ))