(in-package :beh)#| ###################################################################### Generate blocks from descriptions in beh language (for canned examples)Copyright © 1996-7 Michael Travers Part of the Behave! systemSend questions, comments, and fixes to mt@media.mit.edu.###################################################################### |##|(defmacro hold-redisplay (view &body body)  `(progn     (without-interrupts ,@body)     (layout-block view)     (window-update-event-handler (view-window ,view))))|#(defun generate-all-blocks ()  (mapc #'generate-blocks (all-species)))(defmethod* generate-blocks ((s species))  (let ((sb (make-species-block name-of)))    (fill-species-block sb s)))(defmethod fill-species-block ((sb species-block) species)  (dolist (a (species-proto-agents species))    (let ((agent-block (generate-blocks a)))      (fill-arg-block sb '(agent agent) agent-block)      (block-changed agent-block))))#| obso(defmethod* generate-blocks ((a agent))  (let ((condition (car (car body)))        (actions (cdr (car body)))        (agent-block (generate-block (get-form '(if nil nil) 'agent))))    (fill-arg-block agent-block '(condition condition)                    (block-for-exp condition 'condition))    (dolist (action actions)      (fill-arg-block agent-block '(action action)                      (block-for-exp action 'action)))    (relayout agent-block)    agent-block))|#(defmethod* generate-blocks ((a agent))  (block-for-exp (car body) 'agent))(defun block-for-exp (exp type &optional (container *win*))  (let* ((form (get-form exp type))         (block (generate-block form :view-container container)))    (fill-block-args block exp)))(defmethod* fill-block-args ((block form-block) exp)  (when (listp exp)    (mapcar #'(lambda (arg subexp)                (fill-arg-block block arg (block-for-exp subexp (cadr arg) block)))            (args form)            (cdr exp)))  block)(defmethod fill-block-args ((block slider-block) exp)  (let ((value (cadr exp)))    (set-slider-value block value))  block)(defmethod fill-arg-block ((container form-block) arg filler)  (let ((arg-block (find-view container #'(lambda (sv)                                            (and (typep sv 'arg-block)                                                 (eq (car (arg sv)) (car arg)))))))    (if arg-block      (fill-argument-block* container arg-block filler)      (error "couldn't find block for arg ~A" arg))))(defun get-form (exp type)  (case type    (number      (if (numberp exp)       (return-from get-form (defform-1 exp type nil nil 'form-block nil nil))))    (raw     (return-from get-form nil)))       ; +++  (dolist (form (get type :xtranslations)                       (error "Can't get form for ~A of type ~A" exp type))    (cond ((and (atom exp)                (eq exp (name form)))           (return form))          ((and (listp exp)                (eq (car exp)                    (name form)))           (unless (= (1- (length exp)) (length (args form)))             (error "wrong number of arguments in ~A" exp))           (return form)))))(defmethod* swap-agents ((s species))  (psetf agents proto-agents         proto-agents agents));;; other direction; +++ slider values are wrong(defmethod* to-code ((a agent))  `(defagent (,name-of ,(name-of species))     ,@body))(defmethod save-example ()  `(defexample (u-made-it "User Example")     ;species     ,@(mapcar #'to-code (all-agents))))#|  obso I hope;;; I don't know why this thing is a macro(defmacro example (&body body)  `(progn (kill-win)          (reset-species)          (reset-world)          ,@body          (dolist (s (all-species))            (swap-agents s))          (make-win)          (without-interrupts           (scroll-to-type (generate-palette) 'agent)           (generate-all-blocks))          (initialize-world)            ; +++ write this for vft version          ))|#(defun reset-for-example ()  (kill-win)  (reset-species)  (reset-world))(defun setup-for-example (name)  (dolist (s (all-species))    (swap-agents s))  (make-win)  (without-interrupts   (scroll-to-type (generate-palette) 'agent)   (generate-all-blocks))  (initialize-world name))(defmacro defexample ((name pretty-name) &body body)  `(progn     (defun ,name ()        (reset-for-example)       ,@body       (setup-for-example ,pretty-name))     (add-example ',name ',pretty-name)))(defvar *examples* nil)(defun add-example (name pretty-name)  (pushnew (list name pretty-name)           *examples*           :key #'first)  (install-behave-menu)  )