(in-package :beh);;; implementing death (not yet working, but necessary to use current beh-prims)(defun define-breeds (reset-world)  (let ((species (all-species)))    (u::setup-breeds (nconc (mapcar #'name-of species) (list 'u::corpse)))        ;[]    (when reset-world      (run-*logo "ca")      (when *background-color*        (run-*logo (format nil "setpc ~A" *background-color*)))      (mapc #'setup-species species))))#|(defmethod* setup-species ((sl sl-species))  (run-*logo (format nil "create-~A ~A" name-of number))  (run-*logo (format nil "ask-~A[setc ~A setxy random 100 random 500 setdead false]" name-of color)))       ;[]|#(defun setup-demons ()  (dolist (agent *all-agents*)    (u::setup-a-demon (*logo-name-conc agent '-agent) (list agent)))  (u::setup-a-demon (*logo-name-conc 'die-demon1-demon) (list 'u::die-demon1)))(defun initialize-world  (&optional name)  (when name    (set-window-title u::graphics-window (string name)))  (at-listener-level                    ; because size update is done at listener level    (position-graphics-window))  (u::beh-eval-flip t)                   ; this should do a "ca"  (start-all-agents)  )(defun start-utility-agents ()  (run-*logo "die-demon1-demon"))(defun position-graphics-window ()  (let* ((gwin u::graphics-window)         (bwin (view-window *win*))         (screen-width (point-h (second (multiple-value-list (ccl::find-best-color-screen)))))         (beh-right-edge (point-h (add-points (view-position bwin)                                              (view-size bwin)))))    (set-view-position gwin                       (make-point (min (+ 6 beh-right-edge)                                        (- screen-width (point-h (view-size gwin))))                                  44))))         (defform (eat action) (thing)  `(u::eat1 ,thing))