(in-package :beh)#| ######################################################################Define the blocks for StarLogo versionPart of the Behave! systemCopyright © 1996-7 Michael Travers Send questions, comments, and fixes to mt@media.mit.edu.###################################################################### |#(defclass* sl-species (species)  ((color :initarg :color :initform 'red :accessor species-color)   (number :initarg :number :initform 100 :accessor species-number)))(defclass* sl-agent (agent)  ((lisp-code :accessor agent-lisp-code)   (compiled-ok? :accessor compiled-ok?)                     ; yucky mechanism   (downloaded? :initform nil :accessor downloaded?)))(setf *species-class* 'sl-species)(setf *agent-class* 'sl-agent)(defun make-*logo-symbol (sym)  (awhen (find-symbol (symbol-name sym) "U")    (unintern it "U"))  (import sym "U")  (export sym "U")  sym)(defmethod* compile-agent ((agent sl-agent))  (let ((*agent* agent)        (*species* species))    (setf compiled-ok? t)               ; default to t    (setf lisp-code          `((if (= (u::breed) ,(name-of species))   ; ask-species              (%list%               ,(compile-agent-body body)))))));;; Guts of compiler(defun compile-agent-body (body)  (parse-type 'agent (car body)))(defform (if agent          :block-class agent-block          :layout ((:when condition)                   (:then action)))         (condition action)  `(u::if ,condition                    ; +++ I think this is never actually expanded     (u::%list% ,action)))(defform (do agent          :block-class agent-block)         (action)  action);;; Language forms for Starlogo world(defform (always condition) ()  'true)(defform (near condition              :layout ((:nearer-than range)                       (:to specifier)))         (specifier (range number))        ; specifier == (specifier specifier)  `(u::near ,specifier ,range))(defform (on condition) (specifier)  `(u::on ,specifier))(defform (every condition) (number)  `(= 0 (random ,number)))(defform (not condition) (condition)  `(u::not ,condition))(defform (a specifier) (breed)       ; +++  (sl-symbol breed))(defform (anything specifier) ()  -1)                       ; special token, means any object            (defform (mouse specifier) ()  9999)(defun sl-symbol (symbol)  (intern (symbol-name symbol) :u))(defform (go action            :layout ((:go direction)                     (:by amount)))         (direction (amount number))  `(u::go-nowrap ,direction (/ ,amount 10)))(defform (turn action) ((amount number))  `(rt ,amount))(defform (forward action) ((amount number))  `(fd (/ ,amount 10)))(defform (eat action) (thing)  `(u::eat ,thing))(defform (randomly direction) ()  '(random 360))                        ; do we need to scale number?  (defform (towards direction) (thing)  `(towards-thing ,thing))(defform (away-from direction) (thing)  `(u::away-from-thing ,thing))(defform (it thing) ()  (turtle-var 'it))(defform (a-random thing) (breed)  `(u::%one-of-breeds ,breed))(defform (the-closest thing) (breed)  `(u::the-closest ,breed)); 9999 = the number of the mouse(defform (the-mouse thing) ()  9999);;; new pseudo-object regime(defform (the-mouse thing) ()  `(u::mouse-thing))(defform (the-center thing) ()  `(u::center-thing))(defform (towards direction) (thing)  `(u::towards-thing1 ,thing))(defform (away-from direction) (thing)  `(u::away-from-thing1 ,thing));;; some constant headings(defform (east direction) ()  90)(defform (down direction) ()  180);(defform (random number) ((range number));  `(frandom ,range))#|  removed because it doesn't have easy pseudo-english representation.;;; if screen space wasn't at a premium it should be "a random number between <num1> and <num2>".(defform (arand number) ((range number))  `(arandf ,number))|#;;; new form for random, more english-like but doesn't convey...(defform (random-between number                         :layout ((:between low)                                  (:and high)))         ((low number) (high number))  `(u::random-between ,low ,high))  ;;; For turtle/crab.  Will these last?(defform (< condition            :layout ((a :< b)))         ((a number) (b number))  `(< ,a ,b)); (defform (> condition) ((a number) (b number));  `(> ,a ,b))(defform (neighbor-% number) (breed)  `(u::neighbor-% ,breed))(defform (eat action) (thing)  `(u::eat1 ,thing))(defform (hatch action) (action)  `(u::hatch (u::%list% ,action)))(defform (die action) ()  `(u::suicide));;; temp, I hope(defprim 0 number)(defprim 5 number)(defprim 10 number)(defprim 20 number)#|(defprim fish breed)(defprim shark breed)(defprim food breed)|#