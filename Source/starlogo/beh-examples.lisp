(in-package :beh) #| ######################################################################Examples for StarLogo versionPart of the Behave! systemCopyright © 1996-7 Michael Travers Send questions, comments, and fixes to mt@media.mit.edu.###################################################################### |#(defexample (antisocial-example "Antisocial")    (defspecies antisocial :number 50 :color 'red)    (defagent (go antisocial)    (if (near (a antisocial) (slider 5))      (go (randomly) 20))))(defexample (swarm-example "Swarm")    (defspecies bug :number 100 :color 'green)    (defspecies food :number 1 :color 'red)    (defagent (go food)      (if (always)       (go (randomly) (slider 30))))    (defagent (g1015 bug)      (if (near (a (food)) (slider 17))       (go (towards (it)) (slider 25))))    (defagent (g1014 bug)      (if (always)       (go (towards (a-random (bug))) (slider 30)))));;; Let's do fish!(defexample (fish-example "Fish")    (setf *background-color* 91)                ; blue background  (defspecies fish :number 100 :color 'red)  (defspecies shark :number 1 :color 'grey)    (defagent (swim fish)    (if (always)      ;   (turn (arand 1))                    ; deal with 2 actions      (go (towards (the-center)) (slider 3))))                   ; should be (random (slider speed 0 20)) or some such    (defagent (school fish)    (if (always)      (go (towards (a-random fish))    ; awkward!          (slider 9))))     ; should be (random (slider school-strength 0 20))    '(defagent (elbow fish)     (if (on (a fish))                            ; make on work       (go (randomly) .6)))    (defagent (flee fish)                   ; second rule of life    (if (near (a shark) (slider 13))      (go (away-from (it)) (slider 30))))      (defagent (hunt shark)    (if (always)                             ; except when target is dead...how to deal with that?      (go (towards (the-closest fish)) (slider 12))))    )(defexample (fish-w/death-example "Fish w/death")    (setf *background-color* 91)                ; blue background  (defspecies fish :number 100 :color 'red)  (defspecies shark :number 1 :color 'grey)    (defagent (swim fish)    (if (always)      ;   (turn (arand 1))                    ; deal with 2 actions      (go (east) (slider 3))))                   ; should be (random (slider speed 0 20)) or some such    (defagent (school fish)    (if (always)      (go (towards (a-random fish))    ; awkward!          (slider 9))))     ; should be (random (slider school-strength 0 20))    '(defagent (elbow fish)     (if (on (a fish))                            ; make on work       (go (randomly) .6)))    (defagent (flee fish)                   ; second rule of life    (if (near (a shark) (slider 13))      (go (away-from (it)) (slider 30))))      (defagent (hunt shark)    (if (always)                             ; except when target is dead...how to deal with that?      (go (towards (the-closest fish)) (slider 12))))    (defagent (eat shark)    (if (on (a (fish)))      (eat (it))))  )#| not yet, sorry!;;; Food(defspecies food)(defagent (go food)  ((at-bottom)                          ; special condition    (die))  ((otherwise)                          ; second clause (otherwise ought to be same as always)   (go (down) 1)))(defagent (goto-food fish)              ; different from prototype, more than one food.  ((near (a food) 10)   (go (towards (it)) 1)))     (defagent (eat-food fish)               ; first rule of life  ((on (a food))   (eat (it))));;; Predators(defspecies shark :slots '(target))     ; make slots work;;; death is tricky, let's forget it for now   (defagent (choose-target shark)  ((every 100)                          ; every   (set target (a-random fish))))       ; set(defagent (eat-fish shark)  ((on (fish))   (eat (it))))(defagent (hunt shark)  ((always)                             ; except when target is dead...how to deal with that?   (go (towards target) shark-speed)))|#;;; turtles and crabs(defexample (pond-example "Pond (segregation)")    (setf *background-color* 32)    (defspecies tortoise :number 600 :color 'green)  (defspecies crab :number 600 :color 'red)    (defagent (go tortoise)    (if (< (neighbor-% tortoise) (slider 30))      (go (randomly) 50)))    (defagent (go crab)    (if (< (neighbor-% crab) (slider 30))      (go (randomly) 50)))  (defagent (exclude tortoise)    (if (on (anything))      (go (randomly) 10)))  (defagent (exclude crab)    (if (on (anything))      (go (randomly) 10)))    )'(defexample (flu-example "Flu")    (defspecies person :number 100 :color 'blue)    (defagent (wander person)      (if (always)       (go (randomly) 1)))    (defagent (infect person)      (if (on (an infected person))        ; !!!       (set-slot infected 20)))         ; !!!    (defagent (get-better person)      (if (slot>0 infected)                ; !!!       (decrement infected)))           ; !!!    )#|New constructs:set-slot                                ; decrement, increment                    ; slot>0                                  ; predicate(a <slot> <breed>)                      ; a specifier which incorporates a predicate?Some organization issues:- are slots given as part of the world, or can users make them?- we need buttons and sliders, or something, for setting initial conditions  and for affecting the action (ie, an infect-one-person button)- color needs to be tied into infection. presumably the user shouldn't need  to bother about setting this up, but there needs to an indication at least.|#;;; not quite working right for a variety of reasons(defexample (steady-state "Steady State")  (defspecies death :number 10 :color 'red)  (defspecies victim :number 100 :color 'blue)  (defagent (move victim) (if (always) (go (randomly) (slider 2))))  (defagent (move death) (if (always) (go (randomly) (slider 4))))  (defagent (replenish victim)    (if (not (near (a (victim)) (slider 3))) (hatch (forward (10)))))  (defagent (die victim) (if (on (a (death))) (die))))