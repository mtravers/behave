(in-package :beh);;; Agents for VFT (defclass vft-species (species)  ((token :initform :no-token)          ; +++   (shape :initarg :shape :initform 'SmallFish)   (color :initarg :color :initform 'red)))(defclass vft-agent (agent)  ((vft-code)   (compiled-ok? :accessor compiled-ok?)                     ; yucky mechanism   (downloaded? :initform nil :accessor downloaded?)))   ; not really used in VFT(setf *species-class* 'vft-species)(setf *agent-class* 'vft-agent);;; Conditions(defform (always condition) ()  '(Always))'(defform (near condition              :layout ((:nearer-than range)                       (:to specifier)))         (specifier (range number))        ; specifier == (specifier specifier)  `(u::near ,specifier ,range));;; one-row layout (but not quite grammatical); +++ will have to be different for walls'(defform (near condition              :layout ((:near specifier :by range)))         (specifier (range number))        ; specifier == (specifier specifier)  `(NearestObject (And ,specifier (CloserThan ,range))))      ; +++ or IsCloserThan;;; alternate layout(defform (near condition              :layout ((:nearer-than range :to specifier)))         (specifier (range number))        ; specifier == (specifier specifier)  `(NearestObject (And ,specifier (CloserThan ,range))))(defform (near-group condition              :layout ((:near-group specifier :by range)))         (specifier (range number))        ; specifier == (specifier specifier)  `(Centroid (And ,specifier (CloserThan ,range)))); +++ this one is still problematic(defform (can-eat condition) ()  `(CanBeEatenBy Me))(defform (< condition            :layout ((a :< b)))         ((a number) (b number))  `(< ,a ,b))(defform (not condition) (condition)  `(Not ,condition));;; Actions(defform (set-speed action) (number)  `(SetSpeed (Scalar 10) ,number))         ; +++ strength is built-in(defform (set-heading action) (direction)  `(SetHeading (Scalar 10) ,direction))         ; +++ strength is built-in;;; versions with strength!(defform (set-speed* action :layout ((:set-speed number)                                     (strength)))         ((strength number) number)  `(SetSpeed ,strength ,number))         ; +++ strength is built-in(defform (set-heading* action :layout ((:set-heading direction)                                       (strength))) ((strength number) direction)  `(SetHeading ,strength ,direction));;; strength with linear layout(defform (set-speed* action :layout ((strength :set-speed number)))         ((strength number) number)  `(SetSpeed ,strength ,number))         ; +++ strength is built-in(defform (set-heading* action :layout ((strength :set-heading direction)))         ((strength number) direction)  `(SetHeading ,strength ,direction))(defform (eat action) ()                ; argument? But really always has to be IT  );;; this only makes sense for the pond ex, and other actions don't.  Really;;; we need separate spaces. (defform (jump action) ()               ; parameter  );;; Numbers (scalars)(defform (speed-of number) (thing)      ; +++ screen out pseudo obs and return 0  `(SpeedOf ,thing))(defform (neighbor-% number) (breed)  )(defform (0 number) ()  '(Scalar 0))(defform (5 number) ()  '(Scalar 5))(defform (10 number) ()  '(Scalar 10))(defform (20 number) ()  '(Scalar 20)); +++ this needs to be hidden in palette, I think(defvar *number-form*  (defform (20 number :hidden t) (raw)    `(Scalar ,raw)));;; Objects(defform (it thing) () '(It))(defform (me thing) () '(Me))              ; +++ not sure what this is good for(defform (tank-center thing) ()  '(CenterOfTank))(defform (the-average thing) ()                     ; yuck, but what else?  '(It))(defform (wall thing) ()  '(It));;; Specifiers  (can we eliminate this?  How does it fit with mark's predicates?);;; breeds not working'(defform (a specifier) (breed)          ; +++  not yet in VFT  `(IsBreed ,breed));;; temp: kludge species by color(defform (a specifier) (breed)          ; +++  not yet in VFT  `(IsColor Color ,(slot-value (species-named breed) 'color))); +++ bogus!(defform (the-wall specifier) ()  ())(defform (same-species specifier) ()  `(IsBreed (BreedOf Me)));;; probably unnecessary now'(defform (like-me specifier) ()  `(And (IsColor (Colorof Me))         (IsShape (ShapeOf Me))))(defform (like-me specifier) ()  `(LooksLikeMe))(defform (anything specifier) ()  )                                     ; +++ support in vft         ; the?;;; Directions; +++ pseudo-things like CenterOfTank will have to be dealt with separately(defform (heading-of direction) (thing)  `(DirectionOf ,thing))(defform (towards direction) (thing)  `(Towards (PositionOf ,thing)));;; hackery required to treat Tank-center as thing(defform (towards direction) (thing)  `(Towards ,(if (equal thing '(CenterOfTank))               thing               `(PositionOf ,thing))))(defform (away-from direction) (thing)  `(AwayFrom ,(if (equal thing '(CenterOfTank))               thing               `(PositionOf ,thing))))(defform (up direction) () '(Up))             ; absolute(defform (down direction) () '(Down)); not in tank yet?;(defform (left direction) ())           ; relative -- should these have a parameter?;(defform (right direction) ())