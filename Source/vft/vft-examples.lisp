(in-package :beh)(defexample (pred-example "Predator and Prey")    (defspecies fish :pict (get-resource :|PICT| 300) :color 'red)  (defspecies shark :pict (get-resource :|PICT| 302) :color 'blue :shape 'LargeFish)    (defagent (evade fish)    ((near (a shark) (slider 20))     (set-heading (away-from it))     (set-speed 10)))    (defagent (chase shark)    ((near (a fish) (slider 30))     (set-heading (towards it))     (set-speed 12)))    (defagent (eat shark)    ((can-eat)                        ; (can-eat (a fish)) ?     (eat))))                         ; (eat it)(defexample (school-example "Schooling")  (defspecies red-fish)                 ; and others presumably, with all or some of the agents duplicated    (defagent (match red-fish)    ((near (like-me) (slider 20))     (set-speed (speed-of it))     (set-heading (heading-of it))))    (defagent (elbow-room red-fish)    ((near (like-me) (slider 1))     (set-heading (away-from it))))    '(defagent (wall-avoider red-fish)     ; should this be in pred/prey as well? Probably.     ((near (the-wall) (slider 10))      (set-heading (away-from it))))    '(defagent (lonely red-fish)     ((not (near (like-me) (slider 50)))      (set-heading (towards tank-center))))    ; note: i decided that group sensing should in fact be different from individual sensing.  ; so there is a different condition, NEAR-GROUP, and a pseudo-object called THE-AVERAGE which  ; will have the average speed and setting of the last group referenced (aka IT).      (defagent (centroid red-fish)    ((near-group (like-me) (slider 30))             (set-heading (heading-of the-average)))))(defexample (school-sliders-example "Schooling w/sliders")   (defspecies red-fish)                 ; and others presumably, with all or some of the agents duplicated      (defagent (match red-fish)     ((near (like-me) (slider 20))      (set-speed* (slider 20) (speed-of it))      (set-heading* (slider 20) (heading-of it))))      (defagent (elbow-room red-fish)     ((near (like-me) (slider 1))      (set-heading* (slider 20) (away-from it))))      '(defagent (wall-avoider red-fish)     ; should this be in pred/prey as well? Probably.     ((near (the-wall) (slider 10))      (set-heading* (slider 20) (away-from it))))      '(defagent (lonely red-fish)      ((not (near (like-me) (slider 50)))       (set-heading* (slider 20) (towards tank-center))))   ; note: i decided that group sensing should in fact be different from individual sensing.; so there is a different condition, NEAR-GROUP, and a pseudo-object called THE-AVERAGE which; will have the average speed and setting of the last group referenced (aka IT).     (defagent (centroid red-fish)     ((near-group (like-me) (slider 30))              (set-heading* (slider 20) (heading-of the-average)))));;; new version(defexample (school-sliders-example "Schooling w/sliders")   (defspecies red-fish)                 ; and others presumably, with all or some of the agents duplicated      (defagent (match red-fish)     ((near (like-me) (slider 20))      (set-speed* (slider 20) (speed-of it))      (set-heading* (slider 20) (heading-of it))))      (defagent (elbow-room red-fish)     ((near (like-me) (slider 1))      (set-heading* (slider 20) (away-from it))))      '(defagent (wall-avoider red-fish)     ; should this be in pred/prey as well? Probably.     ((near (the-wall) (slider 10))      (set-heading* (slider 20) (away-from it))))      '(defagent (lonely red-fish)      ((not (near (like-me) (slider 50)))       (set-heading* (slider 20) (towards tank-center))))   ; note: i decided that group sensing should in fact be different from individual sensing.; so there is a different condition, NEAR-GROUP, and a pseudo-object called THE-AVERAGE which; will have the average speed and setting of the last group referenced (aka IT).     (defagent (centroid red-fish)     ((near-group (like-me) (slider 30))              (set-heading* (slider 20) (towards it)))))#|  This is (almost) straight from the starlogo version.An alternative way to do this is to have a single species with two different colors, with thetest being (neighbor-% (color-like-me)). The advantage of this is that there is then only asingle agent and parameter.Note that the action here is different than for the fish.|#(defun pond-example ()  (example        (defspecies tortoise :number 600 :color 'green)    (defspecies crab :number 600 :color 'red)    (defagent (go tortoise)      ((< (neighbor-% (like-me)) (slider 30))       (10 (go (randomly) 50))))    (defagent (go crab)      ((< (neighbor-% (like-me)) (slider 30))       (go (randomly) 50)));;; do we need a behavior to keep 1 creature / square, or is that;;; handled automatically?    ))        ;;; 2/13/97 16:03 schooling(defexample (tcm-schooling "Schooling tweaked at TCM")        (defspecies red-fish :pict (get-resource :|PICT| 300) :color 'red)    (defspecies shark :pict (get-resource :|PICT| 302) :color 'blue :shape 'LargeFish)        (defagent (g837 shark)      ((near (a (red-fish)) (slider 9)) (set-speed (slider 10))       (set-heading (towards (it)))))    (defagent (g836 red-fish)      ((near (like-me) (slider 2))       (set-heading* (slider 1) (away-from (it)))))    (defagent (g838 red-fish)      ((near (a (shark)) (slider 11))       (set-speed* (slider 13) (slider 14))       (set-heading* (slider 12) (away-from (it)))))    (defagent (g834 red-fish)      ((near-group (like-me) (slider 7))       (set-heading* (slider 6) (towards (it)))))    (defagent (g835 red-fish)      ((near (like-me) (slider 5))       (set-heading* (slider 3) (heading-of (it)))       (set-speed* (slider 4) (speed-of (it))))))