(in-package :beh)#| ######################################################################Support for slider blocksPart of the Behave! systemCopyright © 1996-7 Michael Travers Send questions, comments, and fixes to mt@media.mit.edu.------Notes:- this uses the StarLogo graphics but not its code.###################################################################### |#(defclass* slider-view (view gesture-handling-mixin)  ((offset :initform 23)   (value))  (:default-initargs :view-size #@(90 12)))(defmethod view-cursor ((v slider-view) point)  (declare (ignore point))  *arrow-cursor*)(defmethod view-default-size ((v slider-view))  #@(90 20));;; assumes zero-based picframes(defun draw-pict-natural (pict left top)  (let ((width (rref pict :picture.picframe.right))        (height (rref pict :picture.picframe.bottom)))    (with-rect (r left top (+ left width) (+ top height))      (#_DrawPicture pict r))))(defmethod* view-draw-contents ((v slider-view))  (draw-pict-natural *slider-track-pict* 0 0)  (draw-pict-natural *slider-finger-pict* (+ 3 offset) 1));;; tracking(defmethod* click ((v slider-view) where)  (let ((mouse-pos (point-h where))        (cursor-center (+ 8 offset)))    (cond ((< (abs (- cursor-center mouse-pos)) 5)           (with-mouse-tracking (new-mouse-pos v)             (set-slider-offset              v              (max 0                    ; trim                   (min                    (+ -8               ; adjust for cursor size                       (point-h new-mouse-pos)                       (- cursor-center mouse-pos)      ; adjust for initial click pos                       )                    75)))             (value-changed v)             (invalidate-view v)))          ((< mouse-pos cursor-center)           (set-slider-value v (- value 1)))          ((> mouse-pos cursor-center)           (set-slider-value v (+ value 1)))))  (value-changed v)  (invalidate-view v)  t)                                  ; click was handled(defmethod* set-slider-offset ((v slider-view) new-offset)  (setf offset new-offset)  (setf value (round (* offset 99/75)))  (value-changed v))(defmethod* set-slider-value ((v slider-view) new-value)  (setf value new-value)  (setf offset (round (* value 75/99)))  (value-changed v))(defmethod value-changed ((v slider-view))  )(defmethod* slider-value ((v slider-view))  value)(defclass* my-slider-view (slider-view layout-block drag-and-drop-mixin drag-mixin expand-container-mixin proto-block)  ((slider-number :reader slider-number)   (max-slider-number :initform 0 :allocation :class))   ); +++ does not deallocate slider numbers, which it ought to(defmethod* initialize-instance :after ((sv my-slider-view) &rest ignore)  (setf slider-number        (incf max-slider-number)))(defmethod value-changed ((v my-slider-view))  (value-changed (view-container v)))(defclass* slider-block (form-block)  ((slider-view)   (number-view)))(defmethod* create-subviews ((v slider-block))  (setf slider-view        (make-instance 'my-slider-view           :view-container v           :view-position #@(47 17)))  (setf number-view        (make-instance 'block-text-subview          :view-container v          :view-position #@(10 10)          :text "23"))  (set-slider-value v (random 100)));;; supress normal layout stuff;;; +++ should perhaps arrange the slider though(defmethod layout-block ((v slider-block) &optional layout-spec)  (declare (ignore layout-spec))  (flet ((find-block (type)           (dosequence (sv (view-subviews v))             (when (typep sv type)               (return sv)))))    (position-row v (list (find-block 'block-text-subview)                          (find-block 'my-slider-view))                  *spacing*)    (shrink-wrap v *spacing*)    ))(defmethod* set-slider-value ((v slider-block) new-v)  (set-slider-value slider-view new-v))(defmethod* value-changed ((v slider-block))  (set-text number-view (princ-to-string (slider-value slider-view))));;; Make it actually do something(defmethod* generate-code ((block slider-block))  `(slider ,(slider-number slider-view)));;; overridden in starlogo;glue(defform (slider number :block-class slider-block) (number)  )