(in-package :beh)#| ######################################################################Support for agent blocks  (and some stuff for agents that should be elsewhere)Copyright © 1996-7 Michael TraversPart of the Behave! systemSend questions, comments, and fixes to mt@media.mit.edu.###################################################################### |#;;; +++ a lot of stuff in agent-block should really be part of agent.(defclass* agent-block (form-block)  ((agent-name :initform (gensym))   (species :initarg :species :initform nil :accessor species)   (switched-on? :initform nil)   (complete? :initform nil :reader complete?)   (agent)));;; Cool toggles(defclass* agent-toggle-button (ccl::toggle-pict-button gesture-handling-mixin proto-block drag-mixin drag-and-drop-mixin expand-container-mixin) () (:default-initargs   :pict (get-resource :pict 203)   :pict-pressed (get-resource :pict 202)))(defmethod ccl::press :after ((button agent-toggle-button))  (user-start-agent-block (view-container button)))(defmethod ccl::release :after ((button agent-toggle-button))  (user-stop-agent-block (view-container button)));;; gray out button if agent block is incomplete(defmethod view-draw-contents :after ((button agent-toggle-button))  (unless (complete? (view-container button))    (with-rect (r 0 (view-size button))      (with-rgb (c *black-color*)        (#_rgbForeColor c)        (#_PenMode #$blend)        (with-rgb (blend (make-gray 127))          ; Ah, at last, here's how to do it right!          (#_OpColor blend))        (#_PaintRect r)        (#_PenMode #$patCopy)))));;; it's hard to know where to put the switch, but if there is always an empty ACTION arg;;; then it can go in the lower-right corner;;; (can't use view-size because we might not have shrink-wrapped yet)(defun *logo-present? ()                ; +++ move elsewhere  (fboundp 'u::init))(defmethod layout-block :after ((block agent-block) &optional ignore)  (let* ((switch (find-view block #'(lambda (v) (typep v 'agent-toggle-button))))         (other-subviews (delete switch (coerce (view-subviews block) 'list))))    (set-view-position     switch     (if (*logo-present?)               ; +++ *logo agents have only one action, for now       (make-point 6 (- (point-v (bounding-size other-subviews)) (point-v (view-size switch))))       (point-max #@(102 32)    ; +++ this is only right for a specific font size (small-blocks)                  (subtract-points (bounding-size other-subviews)                                                   (view-size switch)))))))(defmethod create-subviews :after ((block agent-block))  (make-instance 'agent-toggle-button    :view-container block))(defmethod create-subviews ((block a-block))  );;; based on defagent.(defmethod* register-agent-block ((block agent-block))  (handler-case    (progn      (setf agent (make-instance                    *agent-class*                    :name-of agent-name                    :species (species-named species)                    :block block                    :body (list (generate-code block))))      (compile-agent agent)      (agent-complete block)      agent)    (error (condition)           (agent-incomplete block (princ-to-string condition))     ; +++ might want to store condition somewhere;           (warn "couldn't make agent from block ~A because ~A" block condition)           )))(defmethod* agent-incomplete ((block agent-block) why)  (declare (ignore why))  (when complete?    (setf complete? nil)    (invalidate-view block)               ; toggle might change    (setf (downloaded? agent) nil)    (stop-agent-block block)))(defmethod* agent-complete ((block agent-block))  (unless complete?    (setf complete? t)    (invalidate-view block)    (when switched-on?      (download block))));;; called by downloader(defmethod* agent-active? ((a agent))  (if block    (agent-active? block)    t))                                 ; +++ temp crock, no block means it was made by example(defmethod* agent-active? ((b agent-block))  (and complete? switched-on?))(defmethod* user-start-agent-block ((block agent-block))  (setf switched-on? t)  (if complete?    (start-agent-block block)    (beep)))                            ; +++ should flash the incomplete arg or something(defmethod* user-stop-agent-block ((block agent-block))  (let ((was-active? (agent-active? block)))    (setf switched-on? nil)    (if was-active?      (stop-agent-block block))))(defmethod block-changed :after ((block agent-block))  (register-agent-block block))(defmethod drop :after ((block agent-block))  (unless (typep (view-container block) 'species-block)    (agent-incomplete block "not in species")))(defun start-all-agents ()  (dolist (a (all-agents))    (force-on (agent-block a))))(defmethod force-on ((ab agent-block))  (ccl::press (agent-block-switch ab)))(defmethod agent-block-switch ((ab agent-block))  (find-view ab #'(lambda (sv) (typep sv 'agent-toggle-button))))