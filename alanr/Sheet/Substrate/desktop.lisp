;-*- Mode: Lisp; Package: CCL -*-(in-package :ccl)(defclass color-desktop (has-pixmap a-view)  ((pixmap-handle :initarg :pixmap-handle :initform nil :accessor pixmap-handle)   (wptr :initarg :wptr :initform nil :accessor wptr)))(defmethod with-locked-parent :around ((d color-desktop) continuation)  (if (pixmap-handle d)    (call-next-method d continuation)    (progn       (setf (pixmap-handle d) (rref (wptr d) :cgrafport.portpixmap))      (call-next-method d continuation)      (setf (pixmap-handle d) nil))));; ****************************************************************;; color desktop methods. Put what is needed here so that you can (with-focused-view *desktop* ...)(defmethod initialize-instance ((d color-desktop) &key)  (call-next-method)  (rlet ((it :pointer))    (setf (view-alist d) nil (slot-value d 'view-container) nil (view-origin-slot d) #@(0 0))    (#_getcwmgrport it)    (setf (wptr d) (%get-ptr it))))(defmethod view-origin ((d color-desktop))  0)(defmethod view-position ((d color-desktop))  0)(defmethod view-clip-region ((d color-desktop))  (rref (wptr d) :cgrafport.visrgn))(defmethod pixmap-handle ((d color-desktop))  (rref (wptr d) :cgrafport.portpixmap))(defvar *desktop* nil)(def-load-pointers *desktop* ()  (setq *desktop* (make-instance 'color-desktop)))