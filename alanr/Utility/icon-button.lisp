;; ****************************************************************;;;; Author: Alan Ruttenberg, MIT Media Lab;; email:  alanr-d@media.mit.edu;;;; Created: Sunday October 9,1994;; ;; Thursday January 2,1997 alanr: If icons are strings then coerce to icons using cicn-named.;;;; ****************************************************************(in-package :ccl)(defun kludge-initialize-icon (icon)  (rlet ((it :pointer))    (#_getcwmgrport it)    (with-port (%get-ptr it)      (rlet ((r :rect :topleft #@(-32 -32) :bottomright #@(0 0)))        (#_plotcicon r icon)))))(defmacro color-100 (r g b)  `(make-color (round (* ,r 655.35))               (round (* ,g 655.35))               (round (* ,b 655.35))));****************************************************************(defclass cicon-button (view)  ((cicn :initarg :cicn :initform nil :accessor cicn)   (cicn-pressed :initarg :cicn-pressed :initform nil :accessor cicn-pressed)   (state :initarg :state :initform :released :accessor state)   (extra-right-margin :initarg :extra-right-margin :initform 0 :accessor extra-right-margin)   (extra-left-margin :initarg :extra-left-margin :initform 0 :accessor extra-left-margin)   (extra-top-margin :initarg :extra-top-margin :initform 0 :accessor extra-top-margin)   (extra-bottom-margin :initarg :extra-bottom-margin :initform 0 :accessor extra-bottom-margin)))                         (defmethod initialize-instance ((v cicon-button) &key)    (call-next-method)    (when (stringp (cicn v)) (setf (cicn v) (cicn-named (cicn v))))    (when (stringp (cicn-pressed v)) (setf (cicn-pressed v) (cicn-named (cicn-pressed v))))    ;; assume that all icons for the button are the same size    (kludge-initialize-icon (cicn v))    (set-view-size v (@+ (icon-size v)                         (@! (+ (extra-right-margin v) (extra-left-margin v))                             (+ (extra-bottom-margin v) (extra-top-margin v))))))(defmethod icon-size ((v cicon-button))  (rref (cicn v) :cicon.iconpmap.bounds.bottomright))(defmethod icon-rect ((v cicon-button) rect)  (setf (rref rect rect.topleft)         (rref (cicn v) :cicon.iconpmap.bounds.topleft)        (rref rect rect.bottomright)        (rref (cicn v) :cicon.iconpmap.bounds.bottomright))  rect)(defmethod icon-for-state ((button cicon-button) state)  (ecase state        (:pressed (cicn-pressed button))        (:released (cicn button))))(defmethod view-draw-contents ((button cicon-button))  (call-next-method)  (let ((where (rect (icon-size button))))    (#_offsetrect where (extra-left-margin button) (extra-top-margin button))    (#_plotcicon where (icon-for-state button (state button)))))(defmethod update-now ((v cicon-button))  (invalidate-view v nil)  (window-update-event-handler (view-window v)));; press and release correspond to user actions. These two just change ;; the state.(defmethod make-active ((v cicon-button))  (setf (state v) :pressed)  (update-now v))(defmethod make-unactive ((v cicon-button))  (setf (state v) :released)  (update-now v))(defmethod set-state ((v cicon-button) state)  (setf (state v) state)  (update-now v));; Sunday September 22,1996 alanr(defmethod draw-view-in-gworld :around ((view cicon-button) gworld &optional (position 0) (source-offset 0))  (call-next-method view gworld position (@+ source-offset (@! (extra-left-margin view) (extra-top-margin view)))));****************************************************************(defclass toggle-cicon-button (cicon-button) ())(defmethod press ((button toggle-cicon-button))  (setf (state button) :pressed)  (invalidate-view button nil)  (window-update-event-handler (view-window button))  )(defmethod release ((button toggle-cicon-button))  (setf (state button) :released)  (invalidate-view button nil)  (window-update-event-handler (view-window button))  )(defmethod view-click-event-handler ((v toggle-cicon-button) ignore)  (declare (ignore ignore))  (if (eq (state v) :pressed)    (release v)    (press v)))  ;****************************************************************(defclass momentary-cicon-button (toggle-cicon-button) ())(defmethod view-click-event-handler ((v momentary-cicon-button) ignore)  (declare (ignore ignore))  (press v)  (loop until (not (mouse-down-p))          finally (release v)))  