;; ****************************************************************;;;; Author: Alan Ruttenberg;; email:  alanr@media.mit.edu;;;; (atrace fun1 fun2.. );; creates a window with a box and title for each function.;; the box turns black when the function is executing. ;;;; Created: Friday September 8,1995;; ;; ****************************************************************(in-package :ccl)(defclass activity-window (window)  ((functions :initarg :functions :initform nil :accessor functions)   (views :initarg :views :initform nil :accessor views)   (rowsize :initarg :rowsize :initform  32 :accessor rowsize)   (inset :initarg :inset :initform 2 :accessor inset)   (margin :initarg :margin :initform 5 :accessor margin)))(defclass activity-window-square (view)  ((my-function :initarg :my-function :initform nil :accessor my-function)   (color :initarg :color :initform *black-color* :accessor color)   (box-side :initarg :box-side :initform nil :accessor box-side)   (active :initarg :active :initform nil :accessor active)   (inset :initarg :inset :initform nil :accessor inset)))(defclass activity-window-function-view (view)  ((my-function :initarg :my-function :initform nil :accessor my-function)   (callcount :initarg :callcount :initform nil :accessor callcount)   (pretty-name :initarg :pretty-name :initform nil :accessor pretty-name)   (box :initarg :box :initform nil :accessor box)))(defmethod initialize-instance :after ((v activity-window-function-view) &key)  (setf (pretty-name v)         (or (pretty-name v)            (cond ((symbolp v) (string-downcase (string (my-function v))))                  ((function-name v) (string-downcase (string (my-function v))))                  (t (format nil "~a" (my-function v)))))))(defmethod view-draw-contents ((v activity-window-square))  (with-accessor-values (inset active) v    (let ((rect (rect (view-size v))))      (#_insetrect rect inset inset)      (with-fore-color (if active (color v) *white-color*)        (#_paintrect rect))      (#_framerect rect))))(defmethod paint-active ((v activity-window-square))  #'(lambda ()       (setf (active v) t)      (with-focused-view v (view-draw-contents v))      (sleep .05)))(defmethod paint-inactive ((v activity-window-square))  #'(lambda ()       (setf (active v) nil)      (with-focused-view v (view-draw-contents v))))(defmethod view-draw-contents ((v activity-window-function-view))  (#_moveto 5 (floor (@v (view-size v)) 2))  (format v  "~a" (or (pretty-name v) (function-name v))))(defmethod initialize-instance ((v activity-window) &key )  (call-next-method)  (with-accessor-values (rowsize inset margin functions) v    (loop for count from 0          for f in functions          for box = (make-instance 'activity-window-square                       :view-position (@! margin (+ margin (* count (rowsize v))))                      :view-size (@! rowsize rowsize)                      :my-function f                      :box-side (rowsize v)                      :inset inset)          for title = (make-instance 'activity-window-function-view                         :view-position (@! (+ margin rowsize)                                           (+ margin (* count (rowsize v))))                        :my-function f                        :box box                        :view-size (@! 200 rowsize))          collect box into boxes          collect title into titles          do (eval `(advise ,f (progn                                        (funcall ,(paint-active box))                                       (multiple-value-prog1 (:do-it)                                         (funcall ,(paint-inactive box))))                            :when :around                            :name :activity-meter))          finally          (progn (apply 'add-subviews v titles)                 (apply 'add-subviews v boxes)                 (set-view-size v 300 (* rowsize (1+ (length functions))))))) v)(defmethod window-close :before ((v activity-window))  (loop for f in (functions v)        do `(unadvise ',f :when :around :name :activity-meter)))(defun activity-window (&rest functions)  (make-instance 'activity-window :functions functions))(defmacro atrace (&rest syms)  (apply 'activity-window syms))