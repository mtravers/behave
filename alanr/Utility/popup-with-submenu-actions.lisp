(in-package :ccl);; ****************************************************************;;;; Author: Alan Ruttenberg, Interval Research;; email:  alanr@media.mit.edu;;;; A pop up menu that allows submenu choices to have actions.;; How it works: #_popupmenuselect returns 0 when a submenu or disabled item is;;  selected, to mean that nothing was chosen. Fortunately you can call ;;  (#_menuchoice) afterwards which returns what would have been chosen, had;;   it been legal. I look at that item, and if it is a menu and it is enabled;;   then I do the usual.;;;; The definition for menu-select is taken from "ccl:library;pop-up-menu.lisp";;   I added the code between the **** lines.;;;; Created: Saturday March 11,1995;; ;; ****************************************************************(defclass pop-up-menu-with-submenu-actions (pop-up-menu) ())(defmethod menu-select ((menu pop-up-menu-with-submenu-actions) num                          &aux selection                          selected-menu                          selected-menu-item                          (a-rect (pop-up-menu-rect menu))                          (pos (with-focused-view (view-container menu)                                 (%local-to-global                                   (wptr menu)                                  (rref a-rect :rect.topleft)))))  (declare (ignore num))  (menu-update menu)  (setq selection         #-powerpc (#_PopUpMenuSelect                   :ptr (slot-value menu 'menu-handle)                   :word (+ (point-v pos) 1)                   :word (+ (point-h pos) 1)                   :word (or (pop-up-menu-default-item menu) 0)                   :long)        #+powerpc (#_PopUpMenuSelect                   (slot-value menu 'menu-handle)                   (+ (point-v pos) 1)                   (+ (point-h pos) 1)                    (or (pop-up-menu-default-item menu) 0))        ;we get the selected menu in case you want to break the rules        ;and use heirarchical menus in a pop-up menu        selected-menu (menu-object (ash (logand #xFFFF0000 selection) -16))        selected-menu-item (logand #x0000FFFF selection))  ;;****************************************************************;; this area is the patch to allow submenus to have actions;; the rest of the code is untouched.  (when (zerop selection)    (setq selection (#_menuchoice)          selected-menu (menu-object (ash (logand #xFFFF0000 selection) -16))          selected-menu-item (logand #x0000FFFF selection))    (unless (zerop selected-menu-item)      (let ((item (nth (- selected-menu-item 1) (menu-items selected-menu))))        (unless (and (typep item 'menu) (menu-enabled-p item))          (return-from menu-select nil)))));;****************************************************************  (unless (eq selected-menu-item 0)    (when (pop-up-menu-auto-update-default menu)      (setf (pop-up-menu-default-item menu)            (if (eq selected-menu menu)              selected-menu-item              (let ((1st-level-submenu selected-menu))                (loop                  (let ((owner (menu-owner 1st-level-submenu)))                    (if (eq owner menu)                      (return (1+ (position 1st-level-submenu (menu-items menu)))))                    (if (null owner)                      (return (pop-up-menu-default-item menu)))                    (setq 1st-level-submenu owner)))))))    (menu-item-action     (nth (- selected-menu-item 1) (menu-items selected-menu)))))