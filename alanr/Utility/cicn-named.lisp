;; ****************************************************************;;;; Author: Alan Ruttenberg, MIT Media Lab;; email:  alanr-d@media.mit.edu;;;; Created: Monday December 4,1995;; ;; Pulled out of manage resources;; ****************************************************************(in-package :ccl)(defvar *cicon-resource-file* nil)(defvar *cicon-resources-by-handle* (make-hash-table :test 'eql))(defvar *cicon-resources-by-name* (make-hash-table :test 'equal))(defvar *color-cursors-by-name* (make-hash-table :test 'equal))(defvar *cicon-resource-ids* (make-hash-table :test 'equal))(defun resource-info (resource)  "returns values : type,id,name"  (rlet ((id :integer)         (type :ostype)         (name (:string 255)))    (#_getresinfo :ptr resource :ptr id :ptr type :ptr name)    (values (string (%get-ostype type)) (%get-word id) (%get-string name))))(def-load-pointers clear-cicons-hash-tables ()  (clrhash *cicon-resources-by-name*)  (clrhash *cicon-resources-by-handle*)  )(defun cicn-size (cicn)  (rref cicn cicon.iconpmap.bounds.bottomright))(defun cicn-named (name)  (or (gethash name *cicon-resources-by-name*)      (let ((curresfile (#_CurResFile))            (resource              (progn               (when *cicon-resource-file* (#_UseResFile *cicon-resource-file*))               (let ((result (with-pstrs ((s name)) (#_getnamedresource  :|cicn| s))))                 (if (eql result (%null-ptr))                   nil                   result)))))        (unwind-protect           (progn            (when (null resource)              (progn                 (cerror (format nil "Try to find \"~A\" again" name)                        "Couldn't get color icon named ~s" name)                (setq resource (cicn-named name))))            (multiple-value-bind (type id) (resource-info resource)              (declare (ignore type))              (let ((it (#_getcicon  id )))                (setf (gethash name *cicon-resources-by-name*) it)                (setf (gethash it *cicon-resources-by-handle*)  name)                (setf (gethash it *cicon-resource-ids*) id)                it)))          (#_UseResfile curresfile)))))(defun cicn-id (cicn-handle)  (gethash cicn-handle *cicon-resource-ids*))(def-load-pointers clear-cursor-cache ()  (clrhash *color-cursors-by-name*))(defun color-cursor-named (name)  (or (gethash name *color-cursors-by-name*)      (let ((resource              (let ((result (with-pstrs ((s name))                              (#_getnamedresource  :|crsr| s))))               (if (eql result (%null-ptr))                 nil                 result))))        (when (null resource)          (progn             (cerror (format nil "Try to find \"~A\" again" name)                    "Couldn't get color cursor named ~s" name)            (setq resource (color-cursor-named name))))        (multiple-value-bind (type id) (resource-info resource)          (declare (ignore type))          (let ((it (#_getccursor  id )))            (setf (gethash name *color-cursors-by-name*) it)            it)))))      