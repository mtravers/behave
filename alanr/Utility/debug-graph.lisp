;; ****************************************************************;;;; Author: Alan Ruttenberg, Interval Research;; email:  alanr@media.mit.edu;;;; simple debugging graph adapted from mcl grapher.lisp example;;;; (defun debug-graph (root children-function &optional (name-function 'prin1-to-string));;;; Created: Friday February 10,1995;; ;; ****************************************************************(in-package :ccl)(ccl::require :grapher)(defclass debug-object-node (grapher::node)   ((my-object  :initarg :object :accessor my-object :initform (find-class 'stream))   (my-parents  :initarg :parents :accessor grapher::node-parents :initform nil)   (my-children :accessor grapher::node-children)   (children-function :initarg :children-function :initform nil :accessor children-function)   (name-function :initarg :name-function :initform nil :accessor name-function)   ))(defmethod initialize-instance ((self debug-object-node) &key)  (call-next-method)  (let ((children-function (children-function self)))    (setf (grapher::node-children self) (mapcar #'(lambda(object)                                           (make-instance 'debug-object-node                                             :object object                                             :parents (list self)                                             :children-function children-function                                             :name-function (name-function self)))                                       (funcall children-function (my-object self))))))(defmacro with-clip-rect-intersect (rect &rest body)    (let ((old (gensym))          (new (gensym)))      `(let ((,old (#_NewRgn))             (,new (#_NewRgn)))         (#_getclip ,old)         (#_rectrgn ,new ,rect)         (#_SectRgn ,old ,new ,new)         (#_SetClip ,new)         (unwind-protect           (progn ,@body)           (#_SetClip ,old)           (#_DisposeRgn ,old)           (#_DisposeRgn ,new)))))(defmethod grapher::node-draw ((self debug-object-node))  (when (call-next-method)    (let* ((topleft (grapher::node-position self))           (left (point-h topleft))           (bottomright (add-points topleft (grapher::node-size self)))           (bottom (point-v bottomright)))      (rlet ((r :rect                :topleft topleft                :bottomright bottomright))        (#_eraserect r)        (#_moveto (+ left 3) (- bottom 2))        (without-interrupts         (with-clip-rect-intersect r           (with-pstrs ((str (object-name-string self)))             (#_drawstring str))))))))(defmethod object-name-string ((self debug-object-node))  (funcall (name-function self) (my-object self)))(defgeneric menu-choices (anything) (:method-combination append))(defmethod menu-choices append ((anything t))  nil)(defmethod menu-choices append ((f symbol))  (if (fboundp f)    `(("Edit Definition" ,#'(lambda() (edit-definition f))))))  (defmethod grapher::node-click-event-handler ((object-node debug-object-node) where)  (declare (ignore where))  (let ((menu-choices (menu-choices (my-object object-node))))    (if menu-choices       (pop-up-momentary-menu-from-alist (front-window) menu-choices)      (if (shift-key-p) (setq @ (my-object object-node))          (inspect (my-object object-node))))))(defmethod grapher::node-size ((self debug-object-node))  (make-point (+ 6 (string-width (object-name-string self))) 12))(defun debug-graph (root children-function &optional                             (name-function 'prin1-to-string)                            (max-size #@(600 800)))  (let ((w (make-instance 'grapher::grapher-window             :root-node (make-instance 'debug-object-node                  :object root                 :children-function children-function                 :name-function name-function)    :window-title (format nil "Structure below ~s" root)    :view-font '("geneva" 9))))    (set-view-size w                    (min (+ (@h (field-size (my-scroller w))) 16) (@h max-size))                   (min (+ (@v (field-size (my-scroller w))) 16) (@v max-size)))    w))                                 