; ****************************************************************;;;; Author: Alan Ruttenberg, MIT Media Lab;; email:  alanr-d@media.mit.edu;;;; You'll need to load the interface tools by calling (load-ift), rather than using the;; advertised way;;;; The ift is a pain, because after you edit its source to do what you want, you can't go back and;; edit it in the designer. The function use-ift-dialog helps. Pass it the unadorned;; ift generated code as the first argument.;; the second argument is an alist mapping dialog item text to replacement text. You;; use the text in the interface designer to tell use-ift-dialog what the variables are,;; and you supply a replacement which is what you really want the user to see.;; The third argument is a alist of button names and actions. Where a button is found with ;; one of these names, the action is spliced into the dialog code.;; Return values are a list of values (text) of the fields you defined in variable-fields. The;; function waits for the window to close before returning result;;;; So far you can use buttons, static and editable text and scrolling fred views;;#|E.g. if the dialog designed gave you this:(defparameter *test-dialog*  '(make-instance  'color-dialog  :window-type  :document-with-grow  :window-title  "Test me!"    :view-position  32047655  :view-size  16646641      :view-font  '("Chicago" 12 :srcor :plain (:color-index 0))    :view-subviews    (list (make-dialog-item 'editable-text-dialog-item 458872 1114233 "name" 'nil :allow-returns nil :draw-outline t)          (make-dialog-item 'static-text-dialog-item 524346 1048625 "Name:" 'nil)          (make-dialog-item 'button-dialog-item 328059 1048631 "Done!" 'nil :default-button t)          (make-dialog-item 'editable-text-dialog-item 2293880 1048660 "name2" 'nil :allow-returns nil :draw-outline t)          (make-dialog-item 'static-text-dialog-item 2359348 1048632 "Name2:" 'nil))));; if you called(use-ift-dialog *test-dialog*                 '(("name" "Enter your name here.")                  ("name2" "Enter your last name here."))                '(("Done!" #'(lambda(&rest ignore) (return-from-modal-dialog t)))));; typed my name into the editable text field, and clicked the "Done!" button, the function would return;; and easier way to write it would be(ift-dialog-bind *test-dialog* ((name name2) :done "done!") (print-db name name2))("Alan Ruttenberg")    |#;;;; What this buys you is that if you need to edit the dialog, you eval the;; the code that was generated the last time, make your mods, and then substitute *that*;; for your old source.;;;; Also added a menu action that puts the source onto the clipboard instead of into a new buffer.;;;; Created: Sunday November 19,1995;; ;; ****************************************************************(in-package :ccl);;(defun use-ift-dialog (dialog-function-source variable-fields &optional button-actions)  (let ((result-syms nil))    (labels ((dialog-item-source? (form)               (or                (and (consp form) (eq (car form) 'make-dialog-item))                (and (consp form) (eq (car form) 'let))                ))             (default-if-relevent-item? (dialog-item-source)               ;; scrolling fred item looks like (let ((view ....)) (buffer-insert-with-style view "text"))               (if (and (eq (car dialog-item-source) 'let)                        (ignore-errors (eq (car (third dialog-item-source)) 'buffer-insert-with-style)))                 (loop for (name replacement) in variable-fields                       when (equalp name (third (third dialog-item-source)))                       do (return-from default-if-relevent-item?                             (progn                              (setf (third (third dialog-item-source)) replacement)                              replacement)))                 (loop for (name replacement) in variable-fields                       when (equalp name (fifth dialog-item-source))                       do (return-from default-if-relevent-item?                             (progn                              (setf (fifth dialog-item-source) replacement)                              replacement)))))             (activate-button-field (form)               (and (equal (second form) ''button-dialog-item)                    (let ((found (member (fifth form) button-actions :test 'equalp :key 'car)))                      (and found                           (prog1 t                             (nconc form (list :dialog-item-action (second (car found)))))))))             (map-item-source (form)               (if (dialog-item-source? form)                 (unless (activate-button-field form)                   (let ((result-sym                           (if (and (eq (car form) 'let)                                   (ignore-errors (eq (car (third form)) 'buffer-insert-with-style)))                            (and (member (third (third form)) variable-fields :key 'first :test 'equalp)                                 (make-symbol (third (third form))))                            (and (member (fifth form) variable-fields :key 'first :test 'equalp)                                 (make-symbol (fifth form))))))                     (default-if-relevent-item? form)                     (when result-sym                       (let* ((new-form `(setq ,result-sym ,(copy-list form))))                         (psetf (car form) (car new-form)                                (cdr form) (cdr new-form))                         (push result-sym result-syms)))))                 (if (atom form) form (mapcar #'map-item-source (rest form))))))      (setq result-syms (nreverse result-syms))      (when (symbolp dialog-function-source) (setq dialog-function-source (symbol-value dialog-function-source)))      (let ((copy (copy-tree dialog-function-source)))        (map-item-source copy)        (eval         `(let* (,@result-syms                (window (modal-dialog ,copy t)))            (declare (ccl::ignorable window ,@(loop for sym in result-syms if (consp sym) collect (car sym) else collect sym)))            (mapcar 'dialog-item-text (reverse (list ,@result-syms)))))))));; ****************************************************************;; add an item that pushes the source on the kill ring.(when (not (find-package :ift)) (defpackage :interface-tools (:nicknames "IFT")))(defun add-copy-item (menu)  (add-menu-items    menu    (make-instance 'ift::editing-dialog-menu-item      :menu-item-title "Put source on clipboard"      :menu-item-action 'pprint-source)))(defmethod pprint-source ((window window))  (put-scrap   :fred   (list    (with-output-to-string (s)      (let* ((*print-length* nil)             (*print-level* nil)             (*print-array* t))        (pprint (funcall (intern "OBJECT-SOURCE-CODE" :ift) window) s))))))(defun load-ift ()  (load "ccl:interface tools;make-ift")  (funcall (intern "LOAD-IFT" :ift))  ;; first fix a bit of interface builder code.  (eval '(defmethod ift::object-source-code ((item fred-dialog-item))    (nconc (call-next-method)           `(:allow-returns ,(ift::allow-returns-p item)                            :draw-outline ,(slot-value item 'ccl::draw-outline)))))  ;; now add the clipboard menu item  (funcall (intern "INIT-DESIGN-MENU" :ift))  (add-copy-item (symbol-value (intern "*DESIGN-MENU*" :ift))));; ****************************************************************;; just a bit easier to use.(defmacro ift-dialog-bind (dialog-source (variables &key buttons (done "done") (cancel "cancel")) &body body)  (flet ((done (&rest args)(declare (ignore args)) (return-from-modal-dialog t))         (cancel (&rest args) (declare (ignore args)) (window-close (front-window))))    (ift-dialog-bind-build      dialog-source variables      (append  (list `(,done ,#'done) `(,cancel ,#'cancel)) buttons)     body)))(defun ift-dialog-bind-build (dialog-source variables buttons body)  (flet ((safe-intern (name) (if (stringp name) (intern name :ccl) name)))    (let ((varnames (loop for var in variables                          if (consp var) collect (car (safe-intern var))                          else collect (safe-intern var)))          (varspecs (loop for var in variables                           if (consp var) collect (string var)                          else collect (list (string var) ""))))      `(destructuring-bind ,varnames (use-ift-dialog ,dialog-source ',varspecs                                                      ',buttons)         ,@body))))                                                                              