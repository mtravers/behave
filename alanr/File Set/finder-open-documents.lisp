(in-package :ccl);; author alan ruttenberg.;; (finder-open-documents &rest paths) has the finder open each path.;; If the path is a document, then its application is started, and the file is;; opened in it.;; If the pathname is a directory, the directory is opened in the finder(require 'appleevent-toolkit)(defconstant $kAEOpenSelection :|sope|)(defconstant $kAEFinderEvents :|FNDR|)(defconstant $keySelection :|fsel|)(defun create-alias-record (the-desc path)  (rlet ((alias :aliashandle))    (let ((namestring (mac-namestring path)))      (rlet ((fsspec :fsspec))        (with-pstrs ((name namestring))          (#_fsmakefsspec -1 -1 name fsspec))        (rlet ((fsp :pointer))          (%put-ptr fsp fsspec)          (#_NewAlias fsp fsspec alias)))      (with-dereferenced-handles ((aliasptr (%get-ptr alias)))        (#_AECreatedesc #$typeAlias aliasptr (#_gethandlesize (%get-ptr alias))  the-desc)        (#_DisposHandle :check-error (%get-ptr alias))        ))  the-desc))(defun create-finder-open-selection (the-desc the-target paths &rest create-keywords)  (apply 'create-appleevent the-desc $kAEFinderEvents $kAEOpenSelection the-target         create-keywords)  (let ((directory (mac-namestring (make-pathname :directory (pathname-directory (car paths))))))    (with-aedescs (directory-alias rest-aliases)      (create-alias-record directory-alias  directory)      (create-alias-list rest-aliases paths)      (ae-error (#_AEPutParamDesc the-desc #$keyDirectObject directory-alias))      (ae-error (#_AEPutParamDesc the-desc $keySelection rest-aliases)))))(defun create-finder-open-directory (the-desc the-target path &rest create-keywords)  (apply 'create-appleevent the-desc $kAEFinderEvents $kAEOpenSelection the-target         create-keywords)  (let ((directory (mac-namestring (make-pathname :directory (butlast (pathname-directory path))))))    (with-aedescs (directory-alias rest-aliases)      (create-alias-record directory-alias  directory)      (create-alias-list rest-aliases (list path))      (ae-error (#_AEPutParamDesc the-desc #$keyDirectObject directory-alias))      (ae-error (#_AEPutParamDesc the-desc $keySelection rest-aliases)))))      (defun finder-open-documents (&rest pathnames)  (with-aedescs (appleevent reply target)    (create-named-process-target target "Finder")    (assert (every 'probe-file pathnames) () "Can't have the finder open a nonexistent directory!")    (setq pathnames (mapcar 'truename pathnames))    (if (directoryp (car pathnames))      (progn        (loop for path in pathnames              do              (create-finder-open-directory appleevent target path)              (send-appleevent appleevent reply :reply-mode :no-reply)))      (progn        (create-finder-open-selection appleevent target pathnames)        (send-appleevent appleevent reply :reply-mode :no-reply)))));; copied from find-named-process(defun switch-to-named-process (name)  (with-pstrs ((nameptr name))    (let* ((namelen (%get-byte nameptr))           (bothlen (logior (ash namelen 16) namelen))           (procname (%null-ptr))           (namep (%inc-ptr nameptr 1)))      (declare (dynamic-extent procname namep))      (do-processes (psn inforec)        (%setf-macptr procname (pref inforec :processInfoRec.ProcessName))        (when (and (eql (%get-byte procname) namelen)                   (eql 0 (#_CmpString  (%inc-ptr procname 1) namep bothlen)))          (return-from switch-to-named-process            (#_setfrontprocess psn)))))))(defun open-directory-in-finder (path)  (let ((directory-only (make-pathname :host (pathname-host path)                                       :directory (pathname-directory path))))    (finder-open-documents directory-only)    (switch-to-named-process "Finder")))