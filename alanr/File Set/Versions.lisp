(in-package :ccl)(defun load-relative-logical-host (name &key (separate-fasls? t) (versions? t) before after)  (let* ((load-path *loading-file-source-file*)         (raw (namestring                (make-pathname                 :directory (pathname-directory (truename load-path)))))         (fasl (list (format nil "~A:**;*.fasl" name)                      (format nil "~Afasl:**:*.*"  raw)))         (versions (list (format nil "~A:**;*.lisp;version;*" name)                         (format nil "~Aversions:**:*.lisp:*"  raw)))         (other (list (format nil "~A:**;*.*" name)                      (format nil "~A**:*.*"  raw))))    (set-logical-pathname-translations      name     (append before (when separate-fasls? (list fasl)) (when versions? (list versions)) (list other) after))))so fileset:path;filename;version;name maps to fileset:versions:path:filename:name, so that all old versions can be erased.Types of versions:As you work, automatic save versions."This is a working model" versionsperiodic versions such as daily or weeklyFrozen versions of the filesetmaybe coupled versions of several files which are interdependantWhat you want to do with versions:1) Quickly compare and choose one if you need to2) Have them occupy only a little file space.3) Allow expansion to other versioning schemes.