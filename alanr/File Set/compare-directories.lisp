; THIS IS IN «Nimble:Projects:File Set:compare-directories.lisp», but not «Lisp:Projects:File Set:compare-directories.lisp».; THIS IS IN «Lisp:Projects:File Set:compare-directories.lisp», but not «Nimble:Projects:File Set:compare-directories.lisp».; «»«»«»«»«»«»«»«»«»«»«»«»«»«»;; ****************************************************************;;;; Author: Alan Ruttenberg;; email:  alanr-d@media.mit.edu;;;; Tuesday January 23,1996 added merge-changed-files-hierachical;;;; Created: Friday December 29,1995;; ;; ****************************************************************(in-package :ccl)(defun normalized-directory (dir)  (let ((name (namestring (truename dir))))    (if (not (char= #\: (char name (1- (length name)))))      (format nil "~a:" name)      name)))(defun all-files-minus-directory (dir)  (setq dir (normalized-directory dir))  (let ((dirlength (length dir))        (files (directory (format nil "~a**:*.lisp" dir))))    (mapcar #'(lambda(f) (subseq (namestring f) dirlength)) files)))(defun toplevel-directories-minus-directory (dir)  (setq dir (normalized-directory dir))  (let ((dirlength (length dir))        (dirs (directory (format nil "~a*" dir) :files nil :directories t)))    (mapcar #'(lambda(f) (subseq (namestring f) dirlength)) dirs)))  (defvar *compare-function-counter* 0);; this is from compare.lisp(defmacro with-fred-stream ((stream-var fred-window) &body body)  `(let ((,stream-var (window-selection-stream ,fred-window 0 t)))     ,@body))(defun do-buffer-compare (f1 f2)  (with-fred-stream (stream1 f1)    (with-fred-stream (stream2 f2)      (let ((output (make-instance 'fred-diff-window)))        (print-legend output (window-filename f1) (window-filename f2))        (set-mini-buffer output "Getting diffs …")        (set-mini-buffer output (format nil "~D differences found"                                        (compare stream1 stream2 output)))        (start-matched-text output)   ; ensure last difference-mark is complete        (set-mark (fred-buffer output) 0)        (window-update-event-handler output)        (window-set-not-modified output)))))(defun gdiff-compare-directories        (dir1 dir2 &key verbose print-diffs show-same-files ignore-directory-structure)  (flet ((same-file-name (f1 f2)           (if ignore-directory-structure             (string= (pathname-name f1) (pathname-name f2))             (string= f1 f2)))         (compare-file-contents (f1 f2)           (let ((name (intern (format nil "CF-~a" (incf *compare-function-counter*)))))             (eval `(defun ,name ()                      (do-buffer-compare (ed ,f1) (ed ,f2))))             name)))    (let* ((dir1-norm (normalized-directory dir1))           (dir2-norm (normalized-directory dir2))           (files1 (all-files-minus-directory dir1-norm))           (files2 (all-files-minus-directory dir2-norm))           (intersection (intersection files1 files2 :test #'same-file-name))           (uniq1 (set-difference files1 intersection :test #'same-file-name))           (uniq2 (set-difference files2 intersection :test #'same-file-name)))      (when uniq1        (format t "~&folder ~a unique files are:" dir1)        (dolist (i uniq1)           (format t "~&\"~a~a\"~%" dir1-norm i)))      (when uniq2        (format t "~&folder ~a unique files are:" dir2)        (dolist (i uniq2)           (format t "~&\"~a~a\"~%" dir2-norm i)))      (format t "~&Checking common files for differences...")      (loop for file in intersection            for a-file = (find file files1 :test #'same-file-name)            for b-file = (find file files2 :test #'same-file-name)            do            (when verbose              (format t "Comparing ~a..." file))            (let ((res                   (gnu-file-differences                     (format nil "~a~a" dir1-norm a-file)                    (format nil "~a~a" dir2-norm b-file))))              (if res                (if print-diffs                  (format t "~&~s" res)                  (let ((f1 (format nil "~a~a" dir1-norm a-file))                        (f2 (format nil "~a~a" dir2-norm b-file)))                    (format t "~&(~a) \"~a\" and \"~a\" differ." (compare-file-contents f1 f2) f1 f2)))                (if show-same-files                  (format t "~&~s and ~s are same." a-file b-file)                  (format t "." file))))))));; this is what I want for merging projects.(defun compare-common-toplevel-directories (in-folder-1 in-folder-2)  (let* ((dir1 (normalized-directory in-folder-1))        (dir2 (normalized-directory in-folder-2))        (dirs1 (toplevel-directories-minus-directory in-folder-1))        (dirs2 (toplevel-directories-minus-directory in-folder-2))        (todo (intersection dirs1 dirs2 :test 'string= :key 'namestring)))    (format t "~&~%Comparing toplevel folders:")    (loop for dir in todo          do (format t "~&  ~a" dir))    (format t "~%~%")    (loop for dir in todo          do          (format t "~&Comparing directory ~s in ~s and ~s~%" dir in-folder-1 in-folder-2)          (gdiff-compare-directories            (format nil "~a~a" dir1 dir)           (format nil "~a~a" dir2 dir)))))                  (defun files+-directory (dir files)  (let ((dirlength (length (normalized-directory dir))))    (loop for f in files          for namestring = (namestring f)          collect (cons (subseq namestring dirlength) f))));; Takes a folder with a folder hierarchy full of just changes, and;; and a source directory. Copies out of source directory into old-files-folder,;; then changes into source.(defun merge-update        (&key (changes-folder (progn (message-dialog "Choose where the update is")                                    (choose-directory-dialog)))             (source-folder (progn (message-dialog "Choose the folder to be updated")                                    (choose-directory-dialog)))             (old-file-folder (progn (message-dialog "Choose a new folder where the downdate goes")                                    (choose-new-directory-dialog)))             (verbose t))  (let ((changed-files (directory (format nil "~a**:*" (namestring changes-folder))))        (source-files  (directory (format nil "~a**:*" (namestring source-folder)))))    (let ((changed-hash (make-hash-table :test 'equalp))          (source-hash (make-hash-table :test 'equalp)))      (flet ((no-directory (path) (format nil "~a~a"  (pathname-name path)                                           (if (pathname-type path)                                            (format nil ".~a" (pathname-type path)) ""))))        (loop for (subpath . path) in (files+-directory changes-folder changed-files)              for name = subpath              do               (setf (gethash name changed-hash) path))        (loop for (subpath . path) in (files+-directory source-folder source-files)              for name = subpath              do (setf (gethash name source-hash) path))        (maphash #'(lambda(key data)                      (declare (ignore data))                      (when (not (gethash key source-hash))                       ;(format t "~&new file: ~s" key)                       )) changed-hash)        (maphash #'(lambda(changed-shortname changed-fullname &aux new-pathname)                      (setq new-pathname (gethash changed-shortname source-hash))                     (when (null new-pathname)                       (setq new-pathname (format nil "~a~a" source-folder changed-shortname))                       (maybe-create-directory new-pathname))                     (when (probe-file new-pathname)                       (let ((old-path (format nil "~a~a" old-file-folder changed-shortname)))                         (maybe-create-directory old-path)                         (when verbose                           (format t ";; ~&Saving old version of ~s..." changed-shortname))                         (rename-file new-pathname old-path)))                     (when verbose                       (format t "~&;; Copying new version of ~s..." changed-shortname))                     (copy-file changed-fullname new-pathname))                 changed-hash)))))          