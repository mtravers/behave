(defun fast-find-file (&key (volume "ccl:")                               (name-is "load-newer.lisp")                               (max-matches 20)                               (search-buffer-size 16384))  (let ((search-criteria (+ #$fsSBFlAttrib #$fsSBfullName))        (match-results (#_newptr (* max-matches (record-length :fsspec))))        (search-buffer (#_newptr search-buffer-size)))    (rlet ((paramblock :hparamblockrec) (searchlow :cinfopbrec) (searchhigh :cinfopbrec))      (with-pstr (namestr name-is)        (setf (rref paramblock hparamblockrec.ioCompletion) (%null-ptr))        (setf (rref paramblock hParamblockrec.ioNamePtr) (%null-ptr))        (setf (rref paramblock hParamblockrec.iovrefnum)               (%stack-iopb (pb np) (%path-to-iopb volume pb) (%get-signed-word pb $iovrefnum)))        (setf (rref paramblock hParamblockrec.iomatchptr) match-results)        (setf (rref paramblock hParamblockrec.ioReqMatchCount) max-matches)        (setf (rref paramblock hParamblockrec.iosearchbits) search-criteria)        (setf (rref paramblock hParamblockrec.iosearchinfo1) searchlow)        (setf (rref paramblock hParamblockrec.iosearchinfo2) searchhigh)        (setf (rref paramblock hParamblockrec.ioSearchTime) 0)        (setf (rref paramblock hParamblockrec.ioCatPosition.initialize) 0)        (setf (rref paramblock hParamblockrec.ioOptBuffer) search-buffer)        (setf (rref paramblock hParamblockrec.ioOptBufSize) search-buffer-size)        (setf (rref searchlow cinfopbrec.ioNamePtr) namestr)        (setf (rref searchlow cinfopbrec.ioFlAttrib) 0)        (setf (rref searchhigh cinfopbrec.ionameptr) (%null-ptr))        (setf (rref searchhigh cinfopbrec.ioFlAttrib) #x10)        (assert (= -39 (#_PBCatSearch  paramblock)) ()                "error with pbcatsearch")        (loop for i from 0 below (rref paramblock hparamblockrec.ioActMatchCount)                     collect (%path-from-fsspec (%inc-ptr match-results (* (record-length :fsspec) i))))))))