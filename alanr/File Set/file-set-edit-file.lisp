#|*********************************************************************************Author: Alan Ruttenberg, Interval Researchemail:  alanr-d@media.mit.eduTuesday April 30,1996 alanr: Also use (er) which sees if there is a file on the require path  whose name is symbolMonday April 29,1996: alanr: Now edit-definition tries to see if any loaded path  is the name of the thing you want to edit the definition of, when no other definition  is foundCreated: Saturday May 7,1994*********************************************************************************|#(in-package :ccl); file-set definitions look like this:'(make-instance 'file-set  :name "cyber"  :define-logical-host? t  :files  '("sheet"    "little-aed"    "framer"    ";code;framer-stuff"    ";code;plaintext"    ";code;resources"    ";code;text-functions"    ";code;record-list"    ";code;paragraph-record"    ";code;folder-view"    ));; I want to select ";code;framer-stuff" hit curly-d and edit the file;; maybe this belongs in load-newer...#+ccl-3(defmethod  ed-current/next-top-level-sexp ((f fred-delegation-mixin) &optional foo)  (ed-current/next-top-level-sexp (window-key-handler f) foo))#-ccl-4(advise open-selected-file         (block file-set-patch          (let ((w (front-window))                sel)            (flet ((gunkp (ch) (or (whitespacep ch) (char-equal ch #\"))))              (setq sel (open-file-item-file w))              (setq sel (subseq sel (position-if-not #'gunkp sel)                                (1+ (position-if-not  #'gunkp sel :from-end t))))              ;; this next bit for the benefit of file-set definitions               (let (exp)                 (when (or (char= (char sel 0) #\;) (char= (char sel 1) #\;))                   (setq exp (#-ccl-3 ed-top-level-sexp #+ccl-3 ed-current/next-top-level-sexp w))                   (when (and (consp exp)                              (eq (car exp) 'make-instance)                              (equal (second exp) ''file-set)                              (eq (getf (cddr exp) :define-logical-host?) t))                     (find-file-methods (format nil "~a:~a" (getf (cddr exp) :name) (subseq sel 1)))                     (return-from file-set-patch))))                            (:do-it))))                        :when :around :name "file-set")#+ccl-4(advise open-selected-file-test   (block file-set-patch    (let ((w (front-window))          sel)      (flet ((gunkp (ch) (or (whitespacep ch) (char-equal ch #\"))))        (setq sel (open-file-item-file w))        (setq sel (subseq sel (position-if-not #'gunkp sel)                          (1+ (position-if-not  #'gunkp sel :from-end t))))        ;; this next bit for the benefit of file-set definitions        (let (exp)          (when (or (char= (char sel 0) #\;) (char= (char sel 1) #\;))            (multiple-value-bind (begin end) (ignore-errors (ed-current/next-top-level-sexp w))              (setq exp (unless (null begin)                          (read-from-string (buffer-substring (fred-buffer w) begin end)))))            (when (and (consp exp)                       (eq (car exp) 'make-instance)                       (equal (second exp) ''file-set)                       (eq (getf (cddr exp) :define-logical-host?) t))              (return-from file-set-patch (find-file-methods (format nil "~a:~a" (eval (getf (cddr exp) :name)) (subseq sel 1))))))        (:do-it)))))  :when :around :name "file-set");; 7/25/96 Williams: fixed this to make sure it passes the;; multiple values back through, so no more beeping!;; Saturday December 28,1996 alanr. Above fix broke it - found was always a list(of values), therefore ;;  "if found" always succeeded, so extra code never got executed.(defun maybe-find-source-file (name usual)  (let ((found (multiple-value-list (funcall usual))))    (if (car found)      (values-list found)      (and (when (ignore-errors (string name))             (setq name (string name)))           (when            (or             (let ((it (car (gethash (string name) *all-load-files-by-name*))))               (if it                 (ed it)                 nil))             (er name))            (throw :cancel t))))))(advise edit-definition   (maybe-find-source-file (car arglist) #'(lambda() (:do-it)))  :when :around  :name edit-file-instead-of-definition-sometimes)        