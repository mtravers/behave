;; ****************************************************************;;;; Author: Alan Ruttenberg, MIT Media Lab;; email:  alanr@media.mit.edu;;;;  Use hacked gnu diff to compare files in a file set. Found this on sumex-aim;;   (I think). Takes a "dosc" appleevent with the command line.;;  Bugs: <fixed>:Sometimes was getting error #-908. Adding a delay after ;;   launch application helps that.;;        gnus diff won't take pathnames with spaces in them. ;;        For now I print a message and ignore this.;; 8/6/96 Kotik: new version of files-since that prints modified files with mod date and size, ;;   sorted by date.  You can supply date as a universal time or as a string like "08/16/96 14:53:21";; Friday December 29,1995. Fixed embedded spaces problem.;; Thursday July 13,1995 fixed -908 error by retrying aesend until there is;;    no error;; Created: Monday March 13,1995;; ;; ****************************************************************(in-package :ccl)(defun pathname-sans-host (pathname)  (subseq (namestring pathname) (1+ (length (pathname-host pathname)))))(defun compare-filesets (filset1 filset2 &key (print-diffs nil) (show-same-files nil))  (setq filset1 (file-set (string filset1)))  (setq filset2 (file-set (string filset2)))  (flet ((sans-files (fileset &aux files)           (iterate-over-files             fileset             #'(lambda(f) (push (pathname-sans-host f) files))            #'identity)           files))    (let* ((files1 (sans-files filset1))           (files2 (sans-files filset2))           (intersection (intersection files1 files2 :test 'string=))           (uniq1 (set-difference files1 intersection :test 'string=))           (uniq2 (set-difference files2 intersection :test 'string=)))      (when uniq1        (format t "~%~%fileset ~a unique files are:~%" (name filset1))        (dolist (i uniq1)           (format t "\"~a:~a\"~%" (name filset1) i)))      (when uniq2        (format t "~%~%fileset ~a unique files are:~%" (name filset2))        (dolist (i uniq2)           (format t "\"~a:~a\"~%" (name filset2) i)))      (format t "~%~%Checking common files for differences...~%")      (loop for file in intersection            do;            (format t "Comparing ~a..." file)            (let ((res                   (gnu-file-differences                     (format nil "~a:~a" (name filset1) file)                    (format nil "~a:~a" (name filset2) file))))              (if res                (if print-diffs                  (format t "~%~a~%" res)                  (format t "~&~a differ.~%" file))                (if show-same-files                  (format t "~&~a are same.~%" file)                  (format t "." file))))))))(defun date-string (universal-time &optional (with-time? t))  (multiple-value-bind (second minute hour date month year day-of-week)                        (decode-universal-time universal-time)    (declare (ignore second))    (let ((months '(January February March April May June                     July August September October November December))          (days '(monday tuesday wednesday thursday friday saturday sunday)))      (if with-time?         (format nil "~A ~A ~A,~A ~A:~2,'0D~A"               (string-capitalize (string (nth day-of-week days)))              (string-capitalize (string (nth (- month 1) months)))              date year (mod hour 12) minute               (if (plusp (- hour 12)) "pm" "am"))        (format nil "~A ~A ~A,~A"                 (string-capitalize (string (nth day-of-week days)))                (string-capitalize (string (nth (- month 1) months)))                date year)))))(defvar *last-directory-files* nil)(defun directory-with-mini-buffer (it)  (set-mini-buffer    (front-window :class 'listener)   (format nil "Getting directory ~s"           (namestring (back-translate-pathname it))))  (directory it));; date is a universal-time#|(defun files-since (date &optional files-or-folder include-fasls?)  (let ((files (if (consp files-or-folder)                 files-or-folder                 (if (null files-or-folder)                   *last-directory-files*                   (directory-with-mini-buffer files-or-folder)))))    (setq *last-directory-files* files)    (loop for f in files do          (set-mini-buffer (front-window :class 'listener) (namestring f))          (cond ((null (ignore-errors (probe-file f)))                 (format t "~&~s not found" f))                (t                 (when (> (file-write-date f) date)                   (unless (and (not include-fasls?)                                 (or (string= "fasl" (pathname-type f))                                    (string= "pfsl" (pathname-type f))))                     (print (namestring f)))))))))|#;; 8/6/96 Kotik: new version that prints modified files with mod date and size, sorted by date;;   You can supply date as a universal time or as a string like "08/16/96 14:53:21"(defun files-since (date files-or-folder &key (print-report? t) (return-files? nil)                            (omit-extensions '("pfsl" "fasl")))  (let ((all-files (if (consp files-or-folder)                 files-or-folder                 (directory files-or-folder :test #'not-alias-path-p :resolve-aliases nil)))        (new-files nil))    (when (stringp date)       (setq date (parse-mm-dd-yy-hh-mm-ss-time date)))    (dolist (f all-files)      ; (set-mini-buffer (front-window :class 'listener) (namestring f))      (cond ((null (ignore-errors (probe-file f)))             (format t "~&~a not found" (namestring f)))            (t             (let ((write-date (file-write-date f)))               (when (and (> write-date date)                           (not (member (pathname-type f) omit-extensions :test 'string-equal)))                 (push (list write-date (file-data-size f) f) new-files))))))    (setq new-files (sort new-files #'(lambda (f1 f2) (> (car f1) (car f2)))))    (when print-report?      (format t "~&Date                    Size   File")      (format t "~%----                    ----   ----")      (dolist (file-triple new-files)          (format t "~%~A  ~9D   ~A"                  (date (car file-triple)) (second file-triple) (namestring (third file-triple)))))    (if return-files?      new-files      nil)))(defun not-alias-path-p (path) (not (alias-path-p  path t )))(defmethod newest-file-date ((files-or-folder t))  (let ((files (if (consp files-or-folder)                 files-or-folder                 (if (null files-or-folder)                   *last-directory-files*                   (directory-with-mini-buffer files-or-folder)))))    (setq *last-directory-files* files)    (let ((time (loop for f in files  maximize (file-write-date f))))      (values time (date-string time)))))(defun all-changes-since (time)    (loop for fileset in           (remove-duplicates           (mapcar 'name                    (all (class-prototype (find-class 'file-set))))           :test 'string-equal)          do          (files-since time (format nil "~a:**;*" fileset))))      