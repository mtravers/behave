;;; slider blocks#|; to do:; inhibit *logo native dragging on click; change cursor inside view|##|(setf w (make-instance 'window))(make-slider w)(make-slider *win*)|#;;; base our views on interface, makes everything easier?(defclass slider-view* (drag-mixin gesture-handling-mixin u::interface)  ((slider :initarg :slider)))(defclass slider-view* (proto-block drag-and-drop-mixin drag-mixin gesture-handling-mixin u::interface)  ((slider :initarg :slider)));;; debugging(defmethod* view-draw-contents :after ((v slider-view*))  (with-rect (r 0 view-size)    (with-rgb (c *black-color*)      (#_rgbForeColor c)      (#_FrameRect r))))(defun make-slider (c)  (let* ((view (make-instance 'slider-view*                 :view-container c                 :current-tool 'arrow))         (slider (u::create-new-slider                   view                  (ccl::rect 0) "foo" "foo" 0 100 50 23)))    (setf (slot-value view 'slider) slider)));;; override interface method(defmethod* click ((v slider-view*) where)  (u::obj-click-handler v where slider nil)  t)