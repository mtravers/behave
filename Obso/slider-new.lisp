(in-package :u);;; modified slider stuff, ARGH.(defmethod draw-slider ((view beh::slider-view*) bound-rect offset)  (draw-pict-xy view slider-track-pict (topleft bound-rect))  (draw-pict-xy view slider-finger-pict (+ (left bound-rect) 3 offset)                (+ (top bound-rect) 1))  (draw-pict-xy view slider-text-box-pict (add-points (topleft bound-rect)                                                 #@(4 12))))(defmethod draw-pict-xy ((view beh::slider-view*) pict h &optional v)  (unless (eq view *current-view*)    (warn "bad drawing context"))  (when v (setf h (make-point h v)))  ;; get size as a rectangle  (let ((new-rect (bound-rect-pict pict)))    (offset-rect new-rect h)    (#_DrawPicture pict new-rect)    (dispose-record new-rect)));;; patched to return object(defmethod add-obj-to-interface ((view interface) (obj object))  (setf (object-list view) (append (list obj) (object-list view)))  ;(invalidate-region view (position-region obj) t)) ;mt  (generic-draw view (list obj))  (invalidate-view view t)  obj)                                  ;mt(defmethod draw-slider-variable-text ((view beh::slider-view*) (s slider) color)  );;; slider value limited to -9999 and 9999, so that text will always fit(defmethod draw-slider-value-text ((view beh::slider-view*) (s slider) color)  )  (defmethod generic-draw ((view beh::slider-view*) list-of-objects &optional clip-region)  (unless (listp list-of-objects)    (setf list-of-objects (list list-of-objects)))  (loop for obj in list-of-objects do        (let ((temp-region (new-region)))          (if (selected? obj)            (progn              (union-region (clprgn obj) (position-select-region obj) temp-region)              (when clip-region (intersect-region temp-region clip-region temp-region)))            (if clip-region               (intersect-region (clprgn obj) clip-region temp-region)              (copy-region (pref (wptr view) :grafport.cliprgn) temp-region)))          (unless (empty-region-p temp-region)            (pen-normal view)            (progn ; with-clipped-region-in-view view temp-region              (draw view obj)))          (dispose-region temp-region)          (Setf (needs-redrawing? obj) nil)))  (draw-many-handles view list-of-objects))