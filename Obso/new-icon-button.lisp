;; ****************************************************************;;;; Author: Alan Ruttenberg, MIT Media Lab;; email:  alanr-d@media.mit.edu;;;; Created: Sunday October 9,1994;; MT: revised to use CICON objects, which can draw into gworlds;; todo: use momentary push icons in toggles.;; ;; ****************************************************************(in-package :ccl);;; Additions to CICON class(defmethod icon-size ((c cicon))  (rref (cicon-handle c) cicon.iconpmap.bounds.botright));****************************************************************(defclass cicon-button* (view)  ((cicn :initarg :cicn :initform nil :accessor cicn)   (cicn-pressed :initarg :cicn-pressed :initform nil :accessor cicn-pressed)   (state :initarg :state :initform :released :accessor state)   (extra-right-margin :initarg :extra-right-margin :initform 0 :accessor extra-right-margin)   (extra-left-margin :initarg :extra-left-margin :initform 0 :accessor extra-left-margin)   (extra-top-margin :initarg :extra-top-margin :initform 0 :accessor extra-top-margin)   (extra-bottom-margin :initarg :extra-bottom-margin :initform 0 :accessor extra-bottom-margin)))                         (defmethod initialize-instance ((v cicon-button*) &key)    (call-next-method)    ;; assume that all icons for the button are the same size    (set-view-size v (@+ (icon-size v)                         (@! (+ (extra-right-margin v) (extra-left-margin v))                             (+ (extra-bottom-margin v) (extra-top-margin v))))))(defmethod icon-size ((v cicon-button*))  (icon-size (cicn v)))                 ;mt(defmethod icon-for-state ((button cicon-button*) state)  (ecase state        (:pressed (cicn-pressed button))        (:released (cicn button))))(defmethod view-draw-contents ((button cicon-button*))  (with-fore-color *black-color*    (let ((size (icon-size button)))      (plot-icon (icon-for-state button (state button))                 (extra-top-margin button) (extra-left-margin button)                 (+ (point-v size) (extra-top-margin button))                 (+ (point-h size) (extra-left-margin button))                 ))))(defmethod update-now ((v cicon-button*))  (invalidate-view v nil)  (window-update-event-handler (view-window v)));; press and release correspond to user actions. These two just change ;; the state.(defmethod make-active ((v cicon-button*))  (setf (state v) :pressed)  (update-now v))(defmethod make-unactive ((v cicon-button*))  (setf (state v) :released)  (update-now v))(defmethod set-state ((v cicon-button*) state)  (setf (state v) state)  (update-now v));****************************************************************(defclass toggle-cicon-button* (cicon-button*) ())(defmethod press ((button toggle-cicon-button*))  (setf (state button) :pressed)  (invalidate-view button nil)  (window-update-event-handler (view-window button))  )(defmethod release ((button toggle-cicon-button*))  (setf (state button) :released)  (invalidate-view button nil)  (window-update-event-handler (view-window button))  )(defmethod view-click-event-handler ((v toggle-cicon-button*) ignore)  (declare (ignore ignore))  (if (eq (state v) :pressed)    (release v)    (press v)))  ;****************************************************************(defclass momentary-cicon-button* (toggle-cicon-button*) ())(defmethod view-click-event-handler ((v momentary-cicon-button*) ignore)  (declare (ignore ignore))  (press v)  (loop until (not (mouse-down-p))          finally (release v)))  